
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002354  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024dc  080024dc  000124dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024f4  080024f4  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  080024f4  080024f4  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024f4  080024f4  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024f4  080024f4  000124f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024f8  080024f8  000124f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080024fc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  20000010  0800250c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000074  0800250c  00020074  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009150  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00029190  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002a858  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002b408  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018905  00000000  00000000  0002bf00  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000783c  00000000  00000000  00044805  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e883  00000000  00000000  0004c041  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da8c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000317c  00000000  00000000  000da940  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000010 	.word	0x20000010
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080024c4 	.word	0x080024c4

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000014 	.word	0x20000014
 80001c4:	080024c4 	.word	0x080024c4

080001c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <LL_RCC_HSI_Enable+0x1c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <LL_RCC_HSI_Enable+0x1c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <LL_RCC_HSI_IsReady+0x20>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0302 	and.w	r3, r3, #2
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	bf0c      	ite	eq
 80001f8:	2301      	moveq	r3, #1
 80001fa:	2300      	movne	r3, #0
 80001fc:	b2db      	uxtb	r3, r3
}
 80001fe:	4618      	mov	r0, r3
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	40021000 	.word	0x40021000

0800020c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	00db      	lsls	r3, r3, #3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000222:	4313      	orrs	r3, r2
 8000224:	600b      	str	r3, [r1, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000

08000238 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_RCC_SetSysClkSource+0x24>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	f023 0203 	bic.w	r2, r3, #3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_RCC_SetSysClkSource+0x24>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4313      	orrs	r3, r2
 800024e:	604b      	str	r3, [r1, #4]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <LL_RCC_GetSysClkSource+0x18>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f003 030c 	and.w	r3, r3, #12
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	604b      	str	r3, [r1, #4]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	604b      	str	r3, [r1, #4]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80002dc:	4904      	ldr	r1, [pc, #16]	; (80002f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	604b      	str	r3, [r1, #4]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4313      	orrs	r3, r2
 8000306:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4013      	ands	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000312:	68fb      	ldr	r3, [r7, #12]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000

08000324 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800033a:	69da      	ldr	r2, [r3, #28]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4013      	ands	r3, r2
 8000340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000342:	68fb      	ldr	r3, [r7, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <LL_FLASH_SetLatency+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 0207 	bic.w	r2, r3, #7
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <LL_FLASH_SetLatency+0x24>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	600b      	str	r3, [r1, #0]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40022000 	.word	0x40022000

0800037c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <LL_FLASH_GetLatency+0x18>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0307 	and.w	r3, r3, #7
}
 8000388:	4618      	mov	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40022000 	.word	0x40022000

08000398 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f043 0201 	orr.w	r2, r3, #1
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a1a      	ldr	r2, [r3, #32]
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	621a      	str	r2, [r3, #32]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003fc:	b4b0      	push	{r4, r5, r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d028      	beq.n	800045e <LL_TIM_OC_DisableFast+0x62>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d023      	beq.n	800045a <LL_TIM_OC_DisableFast+0x5e>
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	2b10      	cmp	r3, #16
 8000416:	d01e      	beq.n	8000456 <LL_TIM_OC_DisableFast+0x5a>
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b40      	cmp	r3, #64	; 0x40
 800041c:	d019      	beq.n	8000452 <LL_TIM_OC_DisableFast+0x56>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000424:	d013      	beq.n	800044e <LL_TIM_OC_DisableFast+0x52>
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800042c:	d00d      	beq.n	800044a <LL_TIM_OC_DisableFast+0x4e>
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000434:	d007      	beq.n	8000446 <LL_TIM_OC_DisableFast+0x4a>
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800043c:	d101      	bne.n	8000442 <LL_TIM_OC_DisableFast+0x46>
 800043e:	2307      	movs	r3, #7
 8000440:	e00e      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000442:	2308      	movs	r3, #8
 8000444:	e00c      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000446:	2306      	movs	r3, #6
 8000448:	e00a      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800044a:	2305      	movs	r3, #5
 800044c:	e008      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800044e:	2304      	movs	r3, #4
 8000450:	e006      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000452:	2303      	movs	r3, #3
 8000454:	e004      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000456:	2302      	movs	r3, #2
 8000458:	e002      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800045a:	2301      	movs	r3, #1
 800045c:	e000      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800045e:	2300      	movs	r3, #0
 8000460:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3318      	adds	r3, #24
 8000466:	461a      	mov	r2, r3
 8000468:	4629      	mov	r1, r5
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <LL_TIM_OC_DisableFast+0x94>)
 800046c:	5c5b      	ldrb	r3, [r3, r1]
 800046e:	4413      	add	r3, r2
 8000470:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000472:	6822      	ldr	r2, [r4, #0]
 8000474:	4629      	mov	r1, r5
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <LL_TIM_OC_DisableFast+0x98>)
 8000478:	5c5b      	ldrb	r3, [r3, r1]
 800047a:	4619      	mov	r1, r3
 800047c:	2304      	movs	r3, #4
 800047e:	408b      	lsls	r3, r1
 8000480:	43db      	mvns	r3, r3
 8000482:	4013      	ands	r3, r2
 8000484:	6023      	str	r3, [r4, #0]

}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bcb0      	pop	{r4, r5, r7}
 800048e:	4770      	bx	lr
 8000490:	080024dc 	.word	0x080024dc
 8000494:	080024e8 	.word	0x080024e8

08000498 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000498:	b4b0      	push	{r4, r5, r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d028      	beq.n	80004fa <LL_TIM_OC_EnablePreload+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d023      	beq.n	80004f6 <LL_TIM_OC_EnablePreload+0x5e>
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d01e      	beq.n	80004f2 <LL_TIM_OC_EnablePreload+0x5a>
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2b40      	cmp	r3, #64	; 0x40
 80004b8:	d019      	beq.n	80004ee <LL_TIM_OC_EnablePreload+0x56>
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c0:	d013      	beq.n	80004ea <LL_TIM_OC_EnablePreload+0x52>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c8:	d00d      	beq.n	80004e6 <LL_TIM_OC_EnablePreload+0x4e>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004d0:	d007      	beq.n	80004e2 <LL_TIM_OC_EnablePreload+0x4a>
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004d8:	d101      	bne.n	80004de <LL_TIM_OC_EnablePreload+0x46>
 80004da:	2307      	movs	r3, #7
 80004dc:	e00e      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004de:	2308      	movs	r3, #8
 80004e0:	e00c      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004e2:	2306      	movs	r3, #6
 80004e4:	e00a      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004e6:	2305      	movs	r3, #5
 80004e8:	e008      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004ea:	2304      	movs	r3, #4
 80004ec:	e006      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004ee:	2303      	movs	r3, #3
 80004f0:	e004      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004f2:	2302      	movs	r3, #2
 80004f4:	e002      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004fa:	2300      	movs	r3, #0
 80004fc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3318      	adds	r3, #24
 8000502:	461a      	mov	r2, r3
 8000504:	4629      	mov	r1, r5
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <LL_TIM_OC_EnablePreload+0x94>)
 8000508:	5c5b      	ldrb	r3, [r3, r1]
 800050a:	4413      	add	r3, r2
 800050c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800050e:	6822      	ldr	r2, [r4, #0]
 8000510:	4629      	mov	r1, r5
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <LL_TIM_OC_EnablePreload+0x98>)
 8000514:	5c5b      	ldrb	r3, [r3, r1]
 8000516:	4619      	mov	r1, r3
 8000518:	2308      	movs	r3, #8
 800051a:	408b      	lsls	r3, r1
 800051c:	4313      	orrs	r3, r2
 800051e:	6023      	str	r3, [r4, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bcb0      	pop	{r4, r5, r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	080024dc 	.word	0x080024dc
 8000530:	080024e8 	.word	0x080024e8

08000534 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000562:	f023 0307 	bic.w	r3, r3, #7
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	609a      	str	r2, [r3, #8]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	f043 0201 	orr.w	r2, r3, #1
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fa9c 	bl	8000b3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f832 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f952 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800060c:	f000 f866 	bl	80006dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000610:	f000 f8da 	bl	80007c8 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LL_TIM_EnableCounter(TIM2);
 8000614:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000618:	f7ff febe 	bl	8000398 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800061c:	2101      	movs	r1, #1
 800061e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000622:	f7ff fed9 	bl	80003d8 <LL_TIM_CC_EnableChannel>
   LL_TIM_OC_SetCompareCH1(TIM2, poc);
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <main+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000630:	f7ff ff80 	bl	8000534 <LL_TIM_OC_SetCompareCH1>

  LL_TIM_EnableCounter(TIM3);
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x4c>)
 8000636:	f7ff feaf 	bl	8000398 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM3);
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x4c>)
 800063c:	f7ff ffc0 	bl	80005c0 <LL_TIM_EnableIT_UPDATE>

  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x44>
 8000642:	bf00      	nop
 8000644:	20000000 	.word	0x20000000
 8000648:	40000400 	.word	0x40000400

0800064c <setDutyCycle>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void setDutyCycle(uint8_t D){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]

	LL_TIM_OC_SetCompareCH1(TIM2, D);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800065e:	f7ff ff69 	bl	8000534 <LL_TIM_OC_SetCompareCH1>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe6f 	bl	8000354 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000676:	bf00      	nop
 8000678:	f7ff fe80 	bl	800037c <LL_FLASH_GetLatency>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1fa      	bne.n	8000678 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000682:	f7ff fda1 	bl	80001c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000686:	bf00      	nop
 8000688:	f7ff fdae 	bl	80001e8 <LL_RCC_HSI_IsReady>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d1fa      	bne.n	8000688 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000692:	2010      	movs	r0, #16
 8000694:	f7ff fdba 	bl	800020c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff fdef 	bl	800027c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fe00 	bl	80002a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fe11 	bl	80002cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff fdc4 	bl	8000238 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80006b0:	bf00      	nop
 80006b2:	f7ff fdd5 	bl	8000260 <LL_RCC_GetSysClkSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1fa      	bne.n	80006b2 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <SystemClock_Config+0x6c>)
 80006be:	f001 fec5 	bl	800244c <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fa50 	bl	8000b68 <HAL_InitTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ce:	f000 f91b 	bl	8000908 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	007a1200 	.word	0x007a1200

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80006e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 feda 	bl	80024b4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fe07 	bl	8000324 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000716:	f240 331f 	movw	r3, #799	; 0x31f
 800071a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800071c:	2300      	movs	r3, #0
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000720:	2363      	movs	r3, #99	; 0x63
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000728:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000732:	f001 fb33 	bl	8001d9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000736:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800073a:	f7ff fe3d 	bl	80003b8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800073e:	2100      	movs	r1, #0
 8000740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000744:	f7ff ff04 	bl	8000550 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000748:	2101      	movs	r1, #1
 800074a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800074e:	f7ff fea3 	bl	8000498 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	461a      	mov	r2, r3
 800076c:	2101      	movs	r1, #1
 800076e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000772:	f001 fb85 	bl	8001e80 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000776:	2101      	movs	r1, #1
 8000778:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800077c:	f7ff fe3e 	bl	80003fc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000780:	2100      	movs	r1, #0
 8000782:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000786:	f7ff fef8 	bl	800057a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800078a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800078e:	f7ff ff07 	bl	80005a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000792:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000796:	f7ff fdad 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800079a:	2320      	movs	r3, #32
 800079c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 f9ee 	bl	8001b9a <LL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM3_Init+0xe0>)
 80007fc:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <MX_TIM3_Init+0xe4>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000802:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000810:	2209      	movs	r2, #9
 8000812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000822:	f000 faf6 	bl	8000e12 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 f86c 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800083e:	f000 fbc7 	bl	8000fd0 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000848:	f000 f85e 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800084e:	f000 fb0b 	bl	8000e68 <HAL_TIM_OC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000858:	f000 f856 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800086c:	f001 f822 	bl	80018b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000876:	f000 f847 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800087a:	2310      	movs	r3, #16
 800087c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000892:	f000 fb1f 	bl	8000ed4 <HAL_TIM_OC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800089c:	f000 f834 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000030 	.word	0x20000030
 80008ac:	40000400 	.word	0x40000400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008ca:	f7ff fd13 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80008ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008d2:	f7ff fd0f 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80008d6:	2108      	movs	r1, #8
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <MX_GPIO_Init+0x54>)
 80008da:	f7ff fe81 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_GPIO_Init+0x54>)
 80008f8:	f001 f94f 	bl	8001b9a <LL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	48000400 	.word	0x48000400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_TIM_Base_MspInit+0x44>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d113      	bne.n	800099a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	201d      	movs	r0, #29
 8000990:	f000 fa09 	bl	8000da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000994:	201d      	movs	r0, #29
 8000996:	f000 fa22 	bl	8000dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40000400 	.word	0x40000400
 80009a8:	40021000 	.word	0x40021000

080009ac <LL_TIM_ClearFlag_UPDATE>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f06f 0201 	mvn.w	r2, #1
 80009ba:	611a      	str	r2, [r3, #16]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <HardFault_Handler+0x4>

08000a02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <BusFault_Handler+0x4>

08000a0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f8c1 	bl	8000bc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
 	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 8000a50:	4817      	ldr	r0, [pc, #92]	; (8000ab0 <TIM3_IRQHandler+0x64>)
 8000a52:	f7ff ffb9 	bl	80009c8 <LL_TIM_IsActiveFlag_UPDATE>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d024      	beq.n	8000aa6 <TIM3_IRQHandler+0x5a>

 		if(poc==99)smer=0;
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b63      	cmp	r3, #99	; 0x63
 8000a62:	d102      	bne.n	8000a6a <TIM3_IRQHandler+0x1e>
 8000a64:	4b14      	ldr	r3, [pc, #80]	; (8000ab8 <TIM3_IRQHandler+0x6c>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
 		if(poc==0)smer=1;
 8000a6a:	4b12      	ldr	r3, [pc, #72]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d102      	bne.n	8000a78 <TIM3_IRQHandler+0x2c>
 8000a72:	4b11      	ldr	r3, [pc, #68]	; (8000ab8 <TIM3_IRQHandler+0x6c>)
 8000a74:	2201      	movs	r2, #1
 8000a76:	601a      	str	r2, [r3, #0]

 		if(smer==1)poc++;
 8000a78:	4b0f      	ldr	r3, [pc, #60]	; (8000ab8 <TIM3_IRQHandler+0x6c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	2b01      	cmp	r3, #1
 8000a7e:	d104      	bne.n	8000a8a <TIM3_IRQHandler+0x3e>
 8000a80:	4b0c      	ldr	r3, [pc, #48]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a82:	681b      	ldr	r3, [r3, #0]
 8000a84:	3301      	adds	r3, #1
 8000a86:	4a0b      	ldr	r2, [pc, #44]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a88:	6013      	str	r3, [r2, #0]
 		if(smer==0)poc--;
 8000a8a:	4b0b      	ldr	r3, [pc, #44]	; (8000ab8 <TIM3_IRQHandler+0x6c>)
 8000a8c:	681b      	ldr	r3, [r3, #0]
 8000a8e:	2b00      	cmp	r3, #0
 8000a90:	d104      	bne.n	8000a9c <TIM3_IRQHandler+0x50>
 8000a92:	4b08      	ldr	r3, [pc, #32]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a94:	681b      	ldr	r3, [r3, #0]
 8000a96:	3b01      	subs	r3, #1
 8000a98:	4a06      	ldr	r2, [pc, #24]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a9a:	6013      	str	r3, [r2, #0]

		setDutyCycle(poc);
 8000a9c:	4b05      	ldr	r3, [pc, #20]	; (8000ab4 <TIM3_IRQHandler+0x68>)
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fdd3 	bl	800064c <setDutyCycle>



 	}
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8000aa6:	4802      	ldr	r0, [pc, #8]	; (8000ab0 <TIM3_IRQHandler+0x64>)
 8000aa8:	f7ff ff80 	bl	80009ac <LL_TIM_ClearFlag_UPDATE>

}
 8000aac:	bf00      	nop
 8000aae:	bd80      	pop	{r7, pc}
 8000ab0:	40000400 	.word	0x40000400
 8000ab4:	20000000 	.word	0x20000000
 8000ab8:	2000002c 	.word	0x2000002c

08000abc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000abc:	b480      	push	{r7}
 8000abe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ac0:	4b08      	ldr	r3, [pc, #32]	; (8000ae4 <SystemInit+0x28>)
 8000ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ac6:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <SystemInit+0x28>)
 8000ac8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000acc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000ad0:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SystemInit+0x28>)
 8000ad2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000ad6:	609a      	str	r2, [r3, #8]
#endif
}
 8000ad8:	bf00      	nop
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000ed00 	.word	0xe000ed00

08000ae8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000ae8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b20 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000aec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000aee:	e003      	b.n	8000af8 <LoopCopyDataInit>

08000af0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000af2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000af4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000af6:	3104      	adds	r1, #4

08000af8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <LoopForever+0xe>)
	adds	r2, r0, r1
 8000afc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000afe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000b00:	d3f6      	bcc.n	8000af0 <CopyDataInit>
	ldr	r2, =_sbss
 8000b02:	4a0b      	ldr	r2, [pc, #44]	; (8000b30 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000b04:	e002      	b.n	8000b0c <LoopFillZerobss>

08000b06 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000b06:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000b08:	f842 3b04 	str.w	r3, [r2], #4

08000b0c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000b0c:	4b09      	ldr	r3, [pc, #36]	; (8000b34 <LoopForever+0x16>)
	cmp	r2, r3
 8000b0e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000b10:	d3f9      	bcc.n	8000b06 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000b12:	f7ff ffd3 	bl	8000abc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b16:	f001 fca9 	bl	800246c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000b1a:	f7ff fd6f 	bl	80005fc <main>

08000b1e <LoopForever>:

LoopForever:
    b LoopForever
 8000b1e:	e7fe      	b.n	8000b1e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000b20:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000b24:	080024fc 	.word	0x080024fc
	ldr	r0, =_sdata
 8000b28:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b2c:	20000010 	.word	0x20000010
	ldr	r2, =_sbss
 8000b30:	20000010 	.word	0x20000010
	ldr	r3, = _ebss
 8000b34:	20000074 	.word	0x20000074

08000b38 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b38:	e7fe      	b.n	8000b38 <ADC1_2_IRQHandler>
	...

08000b3c <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b40:	4b08      	ldr	r3, [pc, #32]	; (8000b64 <HAL_Init+0x28>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x28>)
 8000b46:	f043 0310 	orr.w	r3, r3, #16
 8000b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b4c:	2003      	movs	r0, #3
 8000b4e:	f000 f91f 	bl	8000d90 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b52:	2000      	movs	r0, #0
 8000b54:	f000 f808 	bl	8000b68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b58:	f7ff fede 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b5c:	2300      	movs	r3, #0
}
 8000b5e:	4618      	mov	r0, r3
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b082      	sub	sp, #8
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b70:	4b12      	ldr	r3, [pc, #72]	; (8000bbc <HAL_InitTick+0x54>)
 8000b72:	681a      	ldr	r2, [r3, #0]
 8000b74:	4b12      	ldr	r3, [pc, #72]	; (8000bc0 <HAL_InitTick+0x58>)
 8000b76:	781b      	ldrb	r3, [r3, #0]
 8000b78:	4619      	mov	r1, r3
 8000b7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b86:	4618      	mov	r0, r3
 8000b88:	f000 f937 	bl	8000dfa <HAL_SYSTICK_Config>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b92:	2301      	movs	r3, #1
 8000b94:	e00e      	b.n	8000bb4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	2b0f      	cmp	r3, #15
 8000b9a:	d80a      	bhi.n	8000bb2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	6879      	ldr	r1, [r7, #4]
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	f000 f8ff 	bl	8000da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ba8:	4a06      	ldr	r2, [pc, #24]	; (8000bc4 <HAL_InitTick+0x5c>)
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bae:	2300      	movs	r3, #0
 8000bb0:	e000      	b.n	8000bb4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bb2:	2301      	movs	r3, #1
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	3708      	adds	r7, #8
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bd80      	pop	{r7, pc}
 8000bbc:	20000004 	.word	0x20000004
 8000bc0:	2000000c 	.word	0x2000000c
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <HAL_IncTick+0x20>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_IncTick+0x24>)
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4413      	add	r3, r2
 8000bd8:	4a04      	ldr	r2, [pc, #16]	; (8000bec <HAL_IncTick+0x24>)
 8000bda:	6013      	str	r3, [r2, #0]
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	2000000c 	.word	0x2000000c
 8000bec:	20000070 	.word	0x20000070

08000bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	b085      	sub	sp, #20
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	f003 0307 	and.w	r3, r3, #7
 8000bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c00:	4b0c      	ldr	r3, [pc, #48]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c02:	68db      	ldr	r3, [r3, #12]
 8000c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c06:	68ba      	ldr	r2, [r7, #8]
 8000c08:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c0c:	4013      	ands	r3, r2
 8000c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c18:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c1c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c22:	4a04      	ldr	r2, [pc, #16]	; (8000c34 <__NVIC_SetPriorityGrouping+0x44>)
 8000c24:	68bb      	ldr	r3, [r7, #8]
 8000c26:	60d3      	str	r3, [r2, #12]
}
 8000c28:	bf00      	nop
 8000c2a:	3714      	adds	r7, #20
 8000c2c:	46bd      	mov	sp, r7
 8000c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c32:	4770      	bx	lr
 8000c34:	e000ed00 	.word	0xe000ed00

08000c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c3c:	4b04      	ldr	r3, [pc, #16]	; (8000c50 <__NVIC_GetPriorityGrouping+0x18>)
 8000c3e:	68db      	ldr	r3, [r3, #12]
 8000c40:	0a1b      	lsrs	r3, r3, #8
 8000c42:	f003 0307 	and.w	r3, r3, #7
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c54:	b480      	push	{r7}
 8000c56:	b083      	sub	sp, #12
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	db0b      	blt.n	8000c7e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c66:	79fb      	ldrb	r3, [r7, #7]
 8000c68:	f003 021f 	and.w	r2, r3, #31
 8000c6c:	4907      	ldr	r1, [pc, #28]	; (8000c8c <__NVIC_EnableIRQ+0x38>)
 8000c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c72:	095b      	lsrs	r3, r3, #5
 8000c74:	2001      	movs	r0, #1
 8000c76:	fa00 f202 	lsl.w	r2, r0, r2
 8000c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000e100 	.word	0xe000e100

08000c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
 8000c96:	4603      	mov	r3, r0
 8000c98:	6039      	str	r1, [r7, #0]
 8000c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ca0:	2b00      	cmp	r3, #0
 8000ca2:	db0a      	blt.n	8000cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca4:	683b      	ldr	r3, [r7, #0]
 8000ca6:	b2da      	uxtb	r2, r3
 8000ca8:	490c      	ldr	r1, [pc, #48]	; (8000cdc <__NVIC_SetPriority+0x4c>)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	0112      	lsls	r2, r2, #4
 8000cb0:	b2d2      	uxtb	r2, r2
 8000cb2:	440b      	add	r3, r1
 8000cb4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cb8:	e00a      	b.n	8000cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cba:	683b      	ldr	r3, [r7, #0]
 8000cbc:	b2da      	uxtb	r2, r3
 8000cbe:	4908      	ldr	r1, [pc, #32]	; (8000ce0 <__NVIC_SetPriority+0x50>)
 8000cc0:	79fb      	ldrb	r3, [r7, #7]
 8000cc2:	f003 030f 	and.w	r3, r3, #15
 8000cc6:	3b04      	subs	r3, #4
 8000cc8:	0112      	lsls	r2, r2, #4
 8000cca:	b2d2      	uxtb	r2, r2
 8000ccc:	440b      	add	r3, r1
 8000cce:	761a      	strb	r2, [r3, #24]
}
 8000cd0:	bf00      	nop
 8000cd2:	370c      	adds	r7, #12
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000e100 	.word	0xe000e100
 8000ce0:	e000ed00 	.word	0xe000ed00

08000ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b089      	sub	sp, #36	; 0x24
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	60f8      	str	r0, [r7, #12]
 8000cec:	60b9      	str	r1, [r7, #8]
 8000cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cf0:	68fb      	ldr	r3, [r7, #12]
 8000cf2:	f003 0307 	and.w	r3, r3, #7
 8000cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	f1c3 0307 	rsb	r3, r3, #7
 8000cfe:	2b04      	cmp	r3, #4
 8000d00:	bf28      	it	cs
 8000d02:	2304      	movcs	r3, #4
 8000d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	3304      	adds	r3, #4
 8000d0a:	2b06      	cmp	r3, #6
 8000d0c:	d902      	bls.n	8000d14 <NVIC_EncodePriority+0x30>
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	3b03      	subs	r3, #3
 8000d12:	e000      	b.n	8000d16 <NVIC_EncodePriority+0x32>
 8000d14:	2300      	movs	r3, #0
 8000d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d18:	f04f 32ff 	mov.w	r2, #4294967295
 8000d1c:	69bb      	ldr	r3, [r7, #24]
 8000d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d22:	43da      	mvns	r2, r3
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	401a      	ands	r2, r3
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	fa01 f303 	lsl.w	r3, r1, r3
 8000d36:	43d9      	mvns	r1, r3
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d3c:	4313      	orrs	r3, r2
         );
}
 8000d3e:	4618      	mov	r0, r3
 8000d40:	3724      	adds	r7, #36	; 0x24
 8000d42:	46bd      	mov	sp, r7
 8000d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d48:	4770      	bx	lr
	...

08000d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
 8000d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	3b01      	subs	r3, #1
 8000d58:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d5c:	d301      	bcc.n	8000d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e00f      	b.n	8000d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d62:	4a0a      	ldr	r2, [pc, #40]	; (8000d8c <SysTick_Config+0x40>)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	3b01      	subs	r3, #1
 8000d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d6a:	210f      	movs	r1, #15
 8000d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000d70:	f7ff ff8e 	bl	8000c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <SysTick_Config+0x40>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d7a:	4b04      	ldr	r3, [pc, #16]	; (8000d8c <SysTick_Config+0x40>)
 8000d7c:	2207      	movs	r2, #7
 8000d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d80:	2300      	movs	r3, #0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	e000e010 	.word	0xe000e010

08000d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d98:	6878      	ldr	r0, [r7, #4]
 8000d9a:	f7ff ff29 	bl	8000bf0 <__NVIC_SetPriorityGrouping>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}

08000da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da6:	b580      	push	{r7, lr}
 8000da8:	b086      	sub	sp, #24
 8000daa:	af00      	add	r7, sp, #0
 8000dac:	4603      	mov	r3, r0
 8000dae:	60b9      	str	r1, [r7, #8]
 8000db0:	607a      	str	r2, [r7, #4]
 8000db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000db8:	f7ff ff3e 	bl	8000c38 <__NVIC_GetPriorityGrouping>
 8000dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	68b9      	ldr	r1, [r7, #8]
 8000dc2:	6978      	ldr	r0, [r7, #20]
 8000dc4:	f7ff ff8e 	bl	8000ce4 <NVIC_EncodePriority>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dce:	4611      	mov	r1, r2
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f7ff ff5d 	bl	8000c90 <__NVIC_SetPriority>
}
 8000dd6:	bf00      	nop
 8000dd8:	3718      	adds	r7, #24
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b082      	sub	sp, #8
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dec:	4618      	mov	r0, r3
 8000dee:	f7ff ff31 	bl	8000c54 <__NVIC_EnableIRQ>
}
 8000df2:	bf00      	nop
 8000df4:	3708      	adds	r7, #8
 8000df6:	46bd      	mov	sp, r7
 8000df8:	bd80      	pop	{r7, pc}

08000dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dfa:	b580      	push	{r7, lr}
 8000dfc:	b082      	sub	sp, #8
 8000dfe:	af00      	add	r7, sp, #0
 8000e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e02:	6878      	ldr	r0, [r7, #4]
 8000e04:	f7ff ffa2 	bl	8000d4c <SysTick_Config>
 8000e08:	4603      	mov	r3, r0
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d101      	bne.n	8000e24 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000e20:	2301      	movs	r3, #1
 8000e22:	e01d      	b.n	8000e60 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e2a:	b2db      	uxtb	r3, r3
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d106      	bne.n	8000e3e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	2200      	movs	r2, #0
 8000e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e38:	6878      	ldr	r0, [r7, #4]
 8000e3a:	f7ff fd91 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	2202      	movs	r2, #2
 8000e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681a      	ldr	r2, [r3, #0]
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4610      	mov	r0, r2
 8000e52:	f000 f977 	bl	8001144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000e5e:	2300      	movs	r3, #0
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	3708      	adds	r7, #8
 8000e64:	46bd      	mov	sp, r7
 8000e66:	bd80      	pop	{r7, pc}

08000e68 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	b082      	sub	sp, #8
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d101      	bne.n	8000e7a <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8000e76:	2301      	movs	r3, #1
 8000e78:	e01d      	b.n	8000eb6 <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d106      	bne.n	8000e94 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8000e8e:	6878      	ldr	r0, [r7, #4]
 8000e90:	f000 f815 	bl	8000ebe <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681a      	ldr	r2, [r3, #0]
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	3304      	adds	r3, #4
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4610      	mov	r0, r2
 8000ea8:	f000 f94c 	bl	8001144 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2201      	movs	r2, #1
 8000eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000eb4:	2300      	movs	r3, #0
}
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8000ec6:	bf00      	nop
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr
	...

08000ed4 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ee6:	2b01      	cmp	r3, #1
 8000ee8:	d101      	bne.n	8000eee <HAL_TIM_OC_ConfigChannel+0x1a>
 8000eea:	2302      	movs	r3, #2
 8000eec:	e06c      	b.n	8000fc8 <HAL_TIM_OC_ConfigChannel+0xf4>
 8000eee:	68fb      	ldr	r3, [r7, #12]
 8000ef0:	2201      	movs	r2, #1
 8000ef2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2202      	movs	r2, #2
 8000efa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	2b14      	cmp	r3, #20
 8000f02:	d857      	bhi.n	8000fb4 <HAL_TIM_OC_ConfigChannel+0xe0>
 8000f04:	a201      	add	r2, pc, #4	; (adr r2, 8000f0c <HAL_TIM_OC_ConfigChannel+0x38>)
 8000f06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f0a:	bf00      	nop
 8000f0c:	08000f61 	.word	0x08000f61
 8000f10:	08000fb5 	.word	0x08000fb5
 8000f14:	08000fb5 	.word	0x08000fb5
 8000f18:	08000fb5 	.word	0x08000fb5
 8000f1c:	08000f6f 	.word	0x08000f6f
 8000f20:	08000fb5 	.word	0x08000fb5
 8000f24:	08000fb5 	.word	0x08000fb5
 8000f28:	08000fb5 	.word	0x08000fb5
 8000f2c:	08000f7d 	.word	0x08000f7d
 8000f30:	08000fb5 	.word	0x08000fb5
 8000f34:	08000fb5 	.word	0x08000fb5
 8000f38:	08000fb5 	.word	0x08000fb5
 8000f3c:	08000f8b 	.word	0x08000f8b
 8000f40:	08000fb5 	.word	0x08000fb5
 8000f44:	08000fb5 	.word	0x08000fb5
 8000f48:	08000fb5 	.word	0x08000fb5
 8000f4c:	08000f99 	.word	0x08000f99
 8000f50:	08000fb5 	.word	0x08000fb5
 8000f54:	08000fb5 	.word	0x08000fb5
 8000f58:	08000fb5 	.word	0x08000fb5
 8000f5c:	08000fa7 	.word	0x08000fa7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68b9      	ldr	r1, [r7, #8]
 8000f66:	4618      	mov	r0, r3
 8000f68:	f000 f964 	bl	8001234 <TIM_OC1_SetConfig>
      break;
 8000f6c:	e023      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	68b9      	ldr	r1, [r7, #8]
 8000f74:	4618      	mov	r0, r3
 8000f76:	f000 f9e3 	bl	8001340 <TIM_OC2_SetConfig>
      break;
 8000f7a:	e01c      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000f7c:	68fb      	ldr	r3, [r7, #12]
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	68b9      	ldr	r1, [r7, #8]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f000 fa5c 	bl	8001440 <TIM_OC3_SetConfig>
      break;
 8000f88:	e015      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	68b9      	ldr	r1, [r7, #8]
 8000f90:	4618      	mov	r0, r3
 8000f92:	f000 fad3 	bl	800153c <TIM_OC4_SetConfig>
      break;
 8000f96:	e00e      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	68b9      	ldr	r1, [r7, #8]
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f000 fb30 	bl	8001604 <TIM_OC5_SetConfig>
      break;
 8000fa4:	e007      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f000 fb87 	bl	80016c0 <TIM_OC6_SetConfig>
      break;
 8000fb2:	e000      	b.n	8000fb6 <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8000fb4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	2201      	movs	r2, #1
 8000fba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8000fc6:	2300      	movs	r3, #0
}
 8000fc8:	4618      	mov	r0, r3
 8000fca:	3710      	adds	r7, #16
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	bd80      	pop	{r7, pc}

08000fd0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b084      	sub	sp, #16
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
 8000fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <HAL_TIM_ConfigClockSource+0x18>
 8000fe4:	2302      	movs	r3, #2
 8000fe6:	e0a8      	b.n	800113a <HAL_TIM_ConfigClockSource+0x16a>
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	2201      	movs	r2, #1
 8000fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	2202      	movs	r2, #2
 8000ff4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	689b      	ldr	r3, [r3, #8]
 8000ffe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001000:	68fb      	ldr	r3, [r7, #12]
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800100a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001012:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	68fa      	ldr	r2, [r7, #12]
 800101a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800101c:	683b      	ldr	r3, [r7, #0]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	2b40      	cmp	r3, #64	; 0x40
 8001022:	d067      	beq.n	80010f4 <HAL_TIM_ConfigClockSource+0x124>
 8001024:	2b40      	cmp	r3, #64	; 0x40
 8001026:	d80b      	bhi.n	8001040 <HAL_TIM_ConfigClockSource+0x70>
 8001028:	2b10      	cmp	r3, #16
 800102a:	d073      	beq.n	8001114 <HAL_TIM_ConfigClockSource+0x144>
 800102c:	2b10      	cmp	r3, #16
 800102e:	d802      	bhi.n	8001036 <HAL_TIM_ConfigClockSource+0x66>
 8001030:	2b00      	cmp	r3, #0
 8001032:	d06f      	beq.n	8001114 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001034:	e078      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001036:	2b20      	cmp	r3, #32
 8001038:	d06c      	beq.n	8001114 <HAL_TIM_ConfigClockSource+0x144>
 800103a:	2b30      	cmp	r3, #48	; 0x30
 800103c:	d06a      	beq.n	8001114 <HAL_TIM_ConfigClockSource+0x144>
      break;
 800103e:	e073      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001040:	2b70      	cmp	r3, #112	; 0x70
 8001042:	d00d      	beq.n	8001060 <HAL_TIM_ConfigClockSource+0x90>
 8001044:	2b70      	cmp	r3, #112	; 0x70
 8001046:	d804      	bhi.n	8001052 <HAL_TIM_ConfigClockSource+0x82>
 8001048:	2b50      	cmp	r3, #80	; 0x50
 800104a:	d033      	beq.n	80010b4 <HAL_TIM_ConfigClockSource+0xe4>
 800104c:	2b60      	cmp	r3, #96	; 0x60
 800104e:	d041      	beq.n	80010d4 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001050:	e06a      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001052:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001056:	d066      	beq.n	8001126 <HAL_TIM_ConfigClockSource+0x156>
 8001058:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800105c:	d017      	beq.n	800108e <HAL_TIM_ConfigClockSource+0xbe>
      break;
 800105e:	e063      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6818      	ldr	r0, [r3, #0]
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	6899      	ldr	r1, [r3, #8]
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	685a      	ldr	r2, [r3, #4]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	68db      	ldr	r3, [r3, #12]
 8001070:	f000 fc00 	bl	8001874 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	689b      	ldr	r3, [r3, #8]
 800107a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800107c:	68fb      	ldr	r3, [r7, #12]
 800107e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001082:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	68fa      	ldr	r2, [r7, #12]
 800108a:	609a      	str	r2, [r3, #8]
      break;
 800108c:	e04c      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	6818      	ldr	r0, [r3, #0]
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	6899      	ldr	r1, [r3, #8]
 8001096:	683b      	ldr	r3, [r7, #0]
 8001098:	685a      	ldr	r2, [r3, #4]
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	f000 fbe9 	bl	8001874 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	689a      	ldr	r2, [r3, #8]
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80010b0:	609a      	str	r2, [r3, #8]
      break;
 80010b2:	e039      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6818      	ldr	r0, [r3, #0]
 80010b8:	683b      	ldr	r3, [r7, #0]
 80010ba:	6859      	ldr	r1, [r3, #4]
 80010bc:	683b      	ldr	r3, [r7, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	461a      	mov	r2, r3
 80010c2:	f000 fb5d 	bl	8001780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	2150      	movs	r1, #80	; 0x50
 80010cc:	4618      	mov	r0, r3
 80010ce:	f000 fbb6 	bl	800183e <TIM_ITRx_SetConfig>
      break;
 80010d2:	e029      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	6818      	ldr	r0, [r3, #0]
 80010d8:	683b      	ldr	r3, [r7, #0]
 80010da:	6859      	ldr	r1, [r3, #4]
 80010dc:	683b      	ldr	r3, [r7, #0]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	461a      	mov	r2, r3
 80010e2:	f000 fb7c 	bl	80017de <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	2160      	movs	r1, #96	; 0x60
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fba6 	bl	800183e <TIM_ITRx_SetConfig>
      break;
 80010f2:	e019      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6818      	ldr	r0, [r3, #0]
 80010f8:	683b      	ldr	r3, [r7, #0]
 80010fa:	6859      	ldr	r1, [r3, #4]
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	68db      	ldr	r3, [r3, #12]
 8001100:	461a      	mov	r2, r3
 8001102:	f000 fb3d 	bl	8001780 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	2140      	movs	r1, #64	; 0x40
 800110c:	4618      	mov	r0, r3
 800110e:	f000 fb96 	bl	800183e <TIM_ITRx_SetConfig>
      break;
 8001112:	e009      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	681a      	ldr	r2, [r3, #0]
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4619      	mov	r1, r3
 800111e:	4610      	mov	r0, r2
 8001120:	f000 fb8d 	bl	800183e <TIM_ITRx_SetConfig>
      break;
 8001124:	e000      	b.n	8001128 <HAL_TIM_ConfigClockSource+0x158>
      break;
 8001126:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	2201      	movs	r2, #1
 800112c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001138:	2300      	movs	r3, #0
}
 800113a:	4618      	mov	r0, r3
 800113c:	3710      	adds	r7, #16
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
	...

08001144 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001144:	b480      	push	{r7}
 8001146:	b085      	sub	sp, #20
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a32      	ldr	r2, [pc, #200]	; (8001220 <TIM_Base_SetConfig+0xdc>)
 8001158:	4293      	cmp	r3, r2
 800115a:	d007      	beq.n	800116c <TIM_Base_SetConfig+0x28>
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001162:	d003      	beq.n	800116c <TIM_Base_SetConfig+0x28>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	4a2f      	ldr	r2, [pc, #188]	; (8001224 <TIM_Base_SetConfig+0xe0>)
 8001168:	4293      	cmp	r3, r2
 800116a:	d108      	bne.n	800117e <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001172:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	685b      	ldr	r3, [r3, #4]
 8001178:	68fa      	ldr	r2, [r7, #12]
 800117a:	4313      	orrs	r3, r2
 800117c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	4a27      	ldr	r2, [pc, #156]	; (8001220 <TIM_Base_SetConfig+0xdc>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d013      	beq.n	80011ae <TIM_Base_SetConfig+0x6a>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800118c:	d00f      	beq.n	80011ae <TIM_Base_SetConfig+0x6a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a24      	ldr	r2, [pc, #144]	; (8001224 <TIM_Base_SetConfig+0xe0>)
 8001192:	4293      	cmp	r3, r2
 8001194:	d00b      	beq.n	80011ae <TIM_Base_SetConfig+0x6a>
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	4a23      	ldr	r2, [pc, #140]	; (8001228 <TIM_Base_SetConfig+0xe4>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d007      	beq.n	80011ae <TIM_Base_SetConfig+0x6a>
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	4a22      	ldr	r2, [pc, #136]	; (800122c <TIM_Base_SetConfig+0xe8>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d003      	beq.n	80011ae <TIM_Base_SetConfig+0x6a>
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4a21      	ldr	r2, [pc, #132]	; (8001230 <TIM_Base_SetConfig+0xec>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d108      	bne.n	80011c0 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80011b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80011b6:	683b      	ldr	r3, [r7, #0]
 80011b8:	68db      	ldr	r3, [r3, #12]
 80011ba:	68fa      	ldr	r2, [r7, #12]
 80011bc:	4313      	orrs	r3, r2
 80011be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	4313      	orrs	r3, r2
 80011cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68fa      	ldr	r2, [r7, #12]
 80011d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	681a      	ldr	r2, [r3, #0]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	4a0e      	ldr	r2, [pc, #56]	; (8001220 <TIM_Base_SetConfig+0xdc>)
 80011e8:	4293      	cmp	r3, r2
 80011ea:	d00b      	beq.n	8001204 <TIM_Base_SetConfig+0xc0>
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a0e      	ldr	r2, [pc, #56]	; (8001228 <TIM_Base_SetConfig+0xe4>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d007      	beq.n	8001204 <TIM_Base_SetConfig+0xc0>
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	4a0d      	ldr	r2, [pc, #52]	; (800122c <TIM_Base_SetConfig+0xe8>)
 80011f8:	4293      	cmp	r3, r2
 80011fa:	d003      	beq.n	8001204 <TIM_Base_SetConfig+0xc0>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a0c      	ldr	r2, [pc, #48]	; (8001230 <TIM_Base_SetConfig+0xec>)
 8001200:	4293      	cmp	r3, r2
 8001202:	d103      	bne.n	800120c <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	691a      	ldr	r2, [r3, #16]
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	2201      	movs	r2, #1
 8001210:	615a      	str	r2, [r3, #20]
}
 8001212:	bf00      	nop
 8001214:	3714      	adds	r7, #20
 8001216:	46bd      	mov	sp, r7
 8001218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121c:	4770      	bx	lr
 800121e:	bf00      	nop
 8001220:	40012c00 	.word	0x40012c00
 8001224:	40000400 	.word	0x40000400
 8001228:	40014000 	.word	0x40014000
 800122c:	40014400 	.word	0x40014400
 8001230:	40014800 	.word	0x40014800

08001234 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	6a1b      	ldr	r3, [r3, #32]
 8001242:	f023 0201 	bic.w	r2, r3, #1
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	6a1b      	ldr	r3, [r3, #32]
 800124e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	699b      	ldr	r3, [r3, #24]
 800125a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800125c:	68fb      	ldr	r3, [r7, #12]
 800125e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001262:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001266:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8001268:	68fb      	ldr	r3, [r7, #12]
 800126a:	f023 0303 	bic.w	r3, r3, #3
 800126e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001270:	683b      	ldr	r3, [r7, #0]
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	68fa      	ldr	r2, [r7, #12]
 8001276:	4313      	orrs	r3, r2
 8001278:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	f023 0302 	bic.w	r3, r3, #2
 8001280:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	697a      	ldr	r2, [r7, #20]
 8001288:	4313      	orrs	r3, r2
 800128a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4a28      	ldr	r2, [pc, #160]	; (8001330 <TIM_OC1_SetConfig+0xfc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d00b      	beq.n	80012ac <TIM_OC1_SetConfig+0x78>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a27      	ldr	r2, [pc, #156]	; (8001334 <TIM_OC1_SetConfig+0x100>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d007      	beq.n	80012ac <TIM_OC1_SetConfig+0x78>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a26      	ldr	r2, [pc, #152]	; (8001338 <TIM_OC1_SetConfig+0x104>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d003      	beq.n	80012ac <TIM_OC1_SetConfig+0x78>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a25      	ldr	r2, [pc, #148]	; (800133c <TIM_OC1_SetConfig+0x108>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d10c      	bne.n	80012c6 <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	f023 0308 	bic.w	r3, r3, #8
 80012b2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f023 0304 	bic.w	r3, r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	4a19      	ldr	r2, [pc, #100]	; (8001330 <TIM_OC1_SetConfig+0xfc>)
 80012ca:	4293      	cmp	r3, r2
 80012cc:	d00b      	beq.n	80012e6 <TIM_OC1_SetConfig+0xb2>
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4a18      	ldr	r2, [pc, #96]	; (8001334 <TIM_OC1_SetConfig+0x100>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d007      	beq.n	80012e6 <TIM_OC1_SetConfig+0xb2>
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4a17      	ldr	r2, [pc, #92]	; (8001338 <TIM_OC1_SetConfig+0x104>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d003      	beq.n	80012e6 <TIM_OC1_SetConfig+0xb2>
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4a16      	ldr	r2, [pc, #88]	; (800133c <TIM_OC1_SetConfig+0x108>)
 80012e2:	4293      	cmp	r3, r2
 80012e4:	d111      	bne.n	800130a <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80012e6:	693b      	ldr	r3, [r7, #16]
 80012e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	695b      	ldr	r3, [r3, #20]
 80012fa:	693a      	ldr	r2, [r7, #16]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8001300:	683b      	ldr	r3, [r7, #0]
 8001302:	699b      	ldr	r3, [r3, #24]
 8001304:	693a      	ldr	r2, [r7, #16]
 8001306:	4313      	orrs	r3, r2
 8001308:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	693a      	ldr	r2, [r7, #16]
 800130e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	68fa      	ldr	r2, [r7, #12]
 8001314:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8001316:	683b      	ldr	r3, [r7, #0]
 8001318:	685a      	ldr	r2, [r3, #4]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	621a      	str	r2, [r3, #32]
}
 8001324:	bf00      	nop
 8001326:	371c      	adds	r7, #28
 8001328:	46bd      	mov	sp, r7
 800132a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132e:	4770      	bx	lr
 8001330:	40012c00 	.word	0x40012c00
 8001334:	40014000 	.word	0x40014000
 8001338:	40014400 	.word	0x40014400
 800133c:	40014800 	.word	0x40014800

08001340 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001340:	b480      	push	{r7}
 8001342:	b087      	sub	sp, #28
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
 8001348:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	f023 0210 	bic.w	r2, r3, #16
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	6a1b      	ldr	r3, [r3, #32]
 800135a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	699b      	ldr	r3, [r3, #24]
 8001366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800136e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001372:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800137a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	021b      	lsls	r3, r3, #8
 8001382:	68fa      	ldr	r2, [r7, #12]
 8001384:	4313      	orrs	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8001388:	697b      	ldr	r3, [r7, #20]
 800138a:	f023 0320 	bic.w	r3, r3, #32
 800138e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	689b      	ldr	r3, [r3, #8]
 8001394:	011b      	lsls	r3, r3, #4
 8001396:	697a      	ldr	r2, [r7, #20]
 8001398:	4313      	orrs	r3, r2
 800139a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a24      	ldr	r2, [pc, #144]	; (8001430 <TIM_OC2_SetConfig+0xf0>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d10d      	bne.n	80013c0 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80013a4:	697b      	ldr	r3, [r7, #20]
 80013a6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80013aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	011b      	lsls	r3, r3, #4
 80013b2:	697a      	ldr	r2, [r7, #20]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80013be:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4a1b      	ldr	r2, [pc, #108]	; (8001430 <TIM_OC2_SetConfig+0xf0>)
 80013c4:	4293      	cmp	r3, r2
 80013c6:	d00b      	beq.n	80013e0 <TIM_OC2_SetConfig+0xa0>
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	4a1a      	ldr	r2, [pc, #104]	; (8001434 <TIM_OC2_SetConfig+0xf4>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d007      	beq.n	80013e0 <TIM_OC2_SetConfig+0xa0>
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	4a19      	ldr	r2, [pc, #100]	; (8001438 <TIM_OC2_SetConfig+0xf8>)
 80013d4:	4293      	cmp	r3, r2
 80013d6:	d003      	beq.n	80013e0 <TIM_OC2_SetConfig+0xa0>
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a18      	ldr	r2, [pc, #96]	; (800143c <TIM_OC2_SetConfig+0xfc>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d113      	bne.n	8001408 <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80013e0:	693b      	ldr	r3, [r7, #16]
 80013e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013e6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013ee:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	695b      	ldr	r3, [r3, #20]
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	693a      	ldr	r2, [r7, #16]
 80013f8:	4313      	orrs	r3, r2
 80013fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	699b      	ldr	r3, [r3, #24]
 8001400:	009b      	lsls	r3, r3, #2
 8001402:	693a      	ldr	r2, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	693a      	ldr	r2, [r7, #16]
 800140c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	685a      	ldr	r2, [r3, #4]
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	621a      	str	r2, [r3, #32]
}
 8001422:	bf00      	nop
 8001424:	371c      	adds	r7, #28
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr
 800142e:	bf00      	nop
 8001430:	40012c00 	.word	0x40012c00
 8001434:	40014000 	.word	0x40014000
 8001438:	40014400 	.word	0x40014400
 800143c:	40014800 	.word	0x40014800

08001440 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001440:	b480      	push	{r7}
 8001442:	b087      	sub	sp, #28
 8001444:	af00      	add	r7, sp, #0
 8001446:	6078      	str	r0, [r7, #4]
 8001448:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	6a1b      	ldr	r3, [r3, #32]
 800144e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	69db      	ldr	r3, [r3, #28]
 8001466:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001472:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	f023 0303 	bic.w	r3, r3, #3
 800147a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	68fa      	ldr	r2, [r7, #12]
 8001482:	4313      	orrs	r3, r2
 8001484:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800148c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	689b      	ldr	r3, [r3, #8]
 8001492:	021b      	lsls	r3, r3, #8
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	4313      	orrs	r3, r2
 8001498:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a23      	ldr	r2, [pc, #140]	; (800152c <TIM_OC3_SetConfig+0xec>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d10d      	bne.n	80014be <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80014a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	68db      	ldr	r3, [r3, #12]
 80014ae:	021b      	lsls	r3, r3, #8
 80014b0:	697a      	ldr	r2, [r7, #20]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80014b6:	697b      	ldr	r3, [r7, #20]
 80014b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80014bc:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4a1a      	ldr	r2, [pc, #104]	; (800152c <TIM_OC3_SetConfig+0xec>)
 80014c2:	4293      	cmp	r3, r2
 80014c4:	d00b      	beq.n	80014de <TIM_OC3_SetConfig+0x9e>
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	4a19      	ldr	r2, [pc, #100]	; (8001530 <TIM_OC3_SetConfig+0xf0>)
 80014ca:	4293      	cmp	r3, r2
 80014cc:	d007      	beq.n	80014de <TIM_OC3_SetConfig+0x9e>
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	4a18      	ldr	r2, [pc, #96]	; (8001534 <TIM_OC3_SetConfig+0xf4>)
 80014d2:	4293      	cmp	r3, r2
 80014d4:	d003      	beq.n	80014de <TIM_OC3_SetConfig+0x9e>
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4a17      	ldr	r2, [pc, #92]	; (8001538 <TIM_OC3_SetConfig+0xf8>)
 80014da:	4293      	cmp	r3, r2
 80014dc:	d113      	bne.n	8001506 <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80014e6:	693b      	ldr	r3, [r7, #16]
 80014e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	695b      	ldr	r3, [r3, #20]
 80014f2:	011b      	lsls	r3, r3, #4
 80014f4:	693a      	ldr	r2, [r7, #16]
 80014f6:	4313      	orrs	r3, r2
 80014f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	699b      	ldr	r3, [r3, #24]
 80014fe:	011b      	lsls	r3, r3, #4
 8001500:	693a      	ldr	r2, [r7, #16]
 8001502:	4313      	orrs	r3, r2
 8001504:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	693a      	ldr	r2, [r7, #16]
 800150a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	68fa      	ldr	r2, [r7, #12]
 8001510:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	697a      	ldr	r2, [r7, #20]
 800151e:	621a      	str	r2, [r3, #32]
}
 8001520:	bf00      	nop
 8001522:	371c      	adds	r7, #28
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40014000 	.word	0x40014000
 8001534:	40014400 	.word	0x40014400
 8001538:	40014800 	.word	0x40014800

0800153c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800153c:	b480      	push	{r7}
 800153e:	b087      	sub	sp, #28
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	6a1b      	ldr	r3, [r3, #32]
 800154a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	6a1b      	ldr	r3, [r3, #32]
 8001556:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	69db      	ldr	r3, [r3, #28]
 8001562:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800156a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800156e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001576:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001578:	683b      	ldr	r3, [r7, #0]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	021b      	lsls	r3, r3, #8
 800157e:	68fa      	ldr	r2, [r7, #12]
 8001580:	4313      	orrs	r3, r2
 8001582:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800158a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	689b      	ldr	r3, [r3, #8]
 8001590:	031b      	lsls	r3, r3, #12
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	4313      	orrs	r3, r2
 8001596:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	4a16      	ldr	r2, [pc, #88]	; (80015f4 <TIM_OC4_SetConfig+0xb8>)
 800159c:	4293      	cmp	r3, r2
 800159e:	d00b      	beq.n	80015b8 <TIM_OC4_SetConfig+0x7c>
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	4a15      	ldr	r2, [pc, #84]	; (80015f8 <TIM_OC4_SetConfig+0xbc>)
 80015a4:	4293      	cmp	r3, r2
 80015a6:	d007      	beq.n	80015b8 <TIM_OC4_SetConfig+0x7c>
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	4a14      	ldr	r2, [pc, #80]	; (80015fc <TIM_OC4_SetConfig+0xc0>)
 80015ac:	4293      	cmp	r3, r2
 80015ae:	d003      	beq.n	80015b8 <TIM_OC4_SetConfig+0x7c>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	4a13      	ldr	r2, [pc, #76]	; (8001600 <TIM_OC4_SetConfig+0xc4>)
 80015b4:	4293      	cmp	r3, r2
 80015b6:	d109      	bne.n	80015cc <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80015be:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	695b      	ldr	r3, [r3, #20]
 80015c4:	019b      	lsls	r3, r3, #6
 80015c6:	697a      	ldr	r2, [r7, #20]
 80015c8:	4313      	orrs	r3, r2
 80015ca:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	697a      	ldr	r2, [r7, #20]
 80015d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68fa      	ldr	r2, [r7, #12]
 80015d6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	685a      	ldr	r2, [r3, #4]
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	693a      	ldr	r2, [r7, #16]
 80015e4:	621a      	str	r2, [r3, #32]
}
 80015e6:	bf00      	nop
 80015e8:	371c      	adds	r7, #28
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40012c00 	.word	0x40012c00
 80015f8:	40014000 	.word	0x40014000
 80015fc:	40014400 	.word	0x40014400
 8001600:	40014800 	.word	0x40014800

08001604 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001604:	b480      	push	{r7}
 8001606:	b087      	sub	sp, #28
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
 800160c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	685b      	ldr	r3, [r3, #4]
 8001624:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800162a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001632:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	68fa      	ldr	r2, [r7, #12]
 800163e:	4313      	orrs	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8001648:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	041b      	lsls	r3, r3, #16
 8001650:	693a      	ldr	r2, [r7, #16]
 8001652:	4313      	orrs	r3, r2
 8001654:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	4a15      	ldr	r2, [pc, #84]	; (80016b0 <TIM_OC5_SetConfig+0xac>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d00b      	beq.n	8001676 <TIM_OC5_SetConfig+0x72>
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4a14      	ldr	r2, [pc, #80]	; (80016b4 <TIM_OC5_SetConfig+0xb0>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d007      	beq.n	8001676 <TIM_OC5_SetConfig+0x72>
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4a13      	ldr	r2, [pc, #76]	; (80016b8 <TIM_OC5_SetConfig+0xb4>)
 800166a:	4293      	cmp	r3, r2
 800166c:	d003      	beq.n	8001676 <TIM_OC5_SetConfig+0x72>
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	4a12      	ldr	r2, [pc, #72]	; (80016bc <TIM_OC5_SetConfig+0xb8>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d109      	bne.n	800168a <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800167c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	695b      	ldr	r3, [r3, #20]
 8001682:	021b      	lsls	r3, r3, #8
 8001684:	697a      	ldr	r2, [r7, #20]
 8001686:	4313      	orrs	r3, r2
 8001688:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	697a      	ldr	r2, [r7, #20]
 800168e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	685a      	ldr	r2, [r3, #4]
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	693a      	ldr	r2, [r7, #16]
 80016a2:	621a      	str	r2, [r3, #32]
}
 80016a4:	bf00      	nop
 80016a6:	371c      	adds	r7, #28
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr
 80016b0:	40012c00 	.word	0x40012c00
 80016b4:	40014000 	.word	0x40014000
 80016b8:	40014400 	.word	0x40014400
 80016bc:	40014800 	.word	0x40014800

080016c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b087      	sub	sp, #28
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a1b      	ldr	r3, [r3, #32]
 80016da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	021b      	lsls	r3, r3, #8
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4313      	orrs	r3, r2
 80016fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001700:	693b      	ldr	r3, [r7, #16]
 8001702:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001706:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	689b      	ldr	r3, [r3, #8]
 800170c:	051b      	lsls	r3, r3, #20
 800170e:	693a      	ldr	r2, [r7, #16]
 8001710:	4313      	orrs	r3, r2
 8001712:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	4a16      	ldr	r2, [pc, #88]	; (8001770 <TIM_OC6_SetConfig+0xb0>)
 8001718:	4293      	cmp	r3, r2
 800171a:	d00b      	beq.n	8001734 <TIM_OC6_SetConfig+0x74>
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	4a15      	ldr	r2, [pc, #84]	; (8001774 <TIM_OC6_SetConfig+0xb4>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d007      	beq.n	8001734 <TIM_OC6_SetConfig+0x74>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <TIM_OC6_SetConfig+0xb8>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d003      	beq.n	8001734 <TIM_OC6_SetConfig+0x74>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	4a13      	ldr	r2, [pc, #76]	; (800177c <TIM_OC6_SetConfig+0xbc>)
 8001730:	4293      	cmp	r3, r2
 8001732:	d109      	bne.n	8001748 <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800173a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	695b      	ldr	r3, [r3, #20]
 8001740:	029b      	lsls	r3, r3, #10
 8001742:	697a      	ldr	r2, [r7, #20]
 8001744:	4313      	orrs	r3, r2
 8001746:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	697a      	ldr	r2, [r7, #20]
 800174c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	68fa      	ldr	r2, [r7, #12]
 8001752:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	685a      	ldr	r2, [r3, #4]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	693a      	ldr	r2, [r7, #16]
 8001760:	621a      	str	r2, [r3, #32]
}
 8001762:	bf00      	nop
 8001764:	371c      	adds	r7, #28
 8001766:	46bd      	mov	sp, r7
 8001768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176c:	4770      	bx	lr
 800176e:	bf00      	nop
 8001770:	40012c00 	.word	0x40012c00
 8001774:	40014000 	.word	0x40014000
 8001778:	40014400 	.word	0x40014400
 800177c:	40014800 	.word	0x40014800

08001780 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001780:	b480      	push	{r7}
 8001782:	b087      	sub	sp, #28
 8001784:	af00      	add	r7, sp, #0
 8001786:	60f8      	str	r0, [r7, #12]
 8001788:	60b9      	str	r1, [r7, #8]
 800178a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001792:	68fb      	ldr	r3, [r7, #12]
 8001794:	6a1b      	ldr	r3, [r3, #32]
 8001796:	f023 0201 	bic.w	r2, r3, #1
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	699b      	ldr	r3, [r3, #24]
 80017a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80017aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	011b      	lsls	r3, r3, #4
 80017b0:	693a      	ldr	r2, [r7, #16]
 80017b2:	4313      	orrs	r3, r2
 80017b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	f023 030a 	bic.w	r3, r3, #10
 80017bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80017be:	697a      	ldr	r2, [r7, #20]
 80017c0:	68bb      	ldr	r3, [r7, #8]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	697a      	ldr	r2, [r7, #20]
 80017d0:	621a      	str	r2, [r3, #32]
}
 80017d2:	bf00      	nop
 80017d4:	371c      	adds	r7, #28
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017de:	b480      	push	{r7}
 80017e0:	b087      	sub	sp, #28
 80017e2:	af00      	add	r7, sp, #0
 80017e4:	60f8      	str	r0, [r7, #12]
 80017e6:	60b9      	str	r1, [r7, #8]
 80017e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	6a1b      	ldr	r3, [r3, #32]
 80017ee:	f023 0210 	bic.w	r2, r3, #16
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	699b      	ldr	r3, [r3, #24]
 80017fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	6a1b      	ldr	r3, [r3, #32]
 8001800:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8001808:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	031b      	lsls	r3, r3, #12
 800180e:	697a      	ldr	r2, [r7, #20]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001814:	693b      	ldr	r3, [r7, #16]
 8001816:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800181a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800181c:	68bb      	ldr	r3, [r7, #8]
 800181e:	011b      	lsls	r3, r3, #4
 8001820:	693a      	ldr	r2, [r7, #16]
 8001822:	4313      	orrs	r3, r2
 8001824:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	697a      	ldr	r2, [r7, #20]
 800182a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	693a      	ldr	r2, [r7, #16]
 8001830:	621a      	str	r2, [r3, #32]
}
 8001832:	bf00      	nop
 8001834:	371c      	adds	r7, #28
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800183e:	b480      	push	{r7}
 8001840:	b085      	sub	sp, #20
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
 8001846:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001854:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001856:	683a      	ldr	r2, [r7, #0]
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	4313      	orrs	r3, r2
 800185c:	f043 0307 	orr.w	r3, r3, #7
 8001860:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	68fa      	ldr	r2, [r7, #12]
 8001866:	609a      	str	r2, [r3, #8]
}
 8001868:	bf00      	nop
 800186a:	3714      	adds	r7, #20
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001874:	b480      	push	{r7}
 8001876:	b087      	sub	sp, #28
 8001878:	af00      	add	r7, sp, #0
 800187a:	60f8      	str	r0, [r7, #12]
 800187c:	60b9      	str	r1, [r7, #8]
 800187e:	607a      	str	r2, [r7, #4]
 8001880:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800188e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001890:	683b      	ldr	r3, [r7, #0]
 8001892:	021a      	lsls	r2, r3, #8
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	431a      	orrs	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	4313      	orrs	r3, r2
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	4313      	orrs	r3, r2
 80018a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	697a      	ldr	r2, [r7, #20]
 80018a6:	609a      	str	r2, [r3, #8]
}
 80018a8:	bf00      	nop
 80018aa:	371c      	adds	r7, #28
 80018ac:	46bd      	mov	sp, r7
 80018ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b2:	4770      	bx	lr

080018b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b085      	sub	sp, #20
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d101      	bne.n	80018cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80018c8:	2302      	movs	r3, #2
 80018ca:	e054      	b.n	8001976 <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	2201      	movs	r2, #1
 80018d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	2202      	movs	r2, #2
 80018d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	689b      	ldr	r3, [r3, #8]
 80018ea:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a24      	ldr	r2, [pc, #144]	; (8001984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d108      	bne.n	8001908 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	68fa      	ldr	r2, [r7, #12]
 8001904:	4313      	orrs	r3, r2
 8001906:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800190e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	68fa      	ldr	r2, [r7, #12]
 8001916:	4313      	orrs	r3, r2
 8001918:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68fa      	ldr	r2, [r7, #12]
 8001920:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	4a17      	ldr	r2, [pc, #92]	; (8001984 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d00e      	beq.n	800194a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d009      	beq.n	800194a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4a13      	ldr	r2, [pc, #76]	; (8001988 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d004      	beq.n	800194a <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4a11      	ldr	r2, [pc, #68]	; (800198c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8001946:	4293      	cmp	r3, r2
 8001948:	d10c      	bne.n	8001964 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800194a:	68bb      	ldr	r3, [r7, #8]
 800194c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001950:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	4313      	orrs	r3, r2
 800195a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	68ba      	ldr	r2, [r7, #8]
 8001962:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2200      	movs	r2, #0
 8001970:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001974:	2300      	movs	r3, #0
}
 8001976:	4618      	mov	r0, r3
 8001978:	3714      	adds	r7, #20
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	40012c00 	.word	0x40012c00
 8001988:	40000400 	.word	0x40000400
 800198c:	40014000 	.word	0x40014000

08001990 <LL_GPIO_SetPinMode>:
{
 8001990:	b480      	push	{r7}
 8001992:	b089      	sub	sp, #36	; 0x24
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	60b9      	str	r1, [r7, #8]
 800199a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681a      	ldr	r2, [r3, #0]
 80019a0:	68bb      	ldr	r3, [r7, #8]
 80019a2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a4:	697b      	ldr	r3, [r7, #20]
 80019a6:	fa93 f3a3 	rbit	r3, r3
 80019aa:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80019ac:	693b      	ldr	r3, [r7, #16]
 80019ae:	fab3 f383 	clz	r3, r3
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	005b      	lsls	r3, r3, #1
 80019b6:	2103      	movs	r1, #3
 80019b8:	fa01 f303 	lsl.w	r3, r1, r3
 80019bc:	43db      	mvns	r3, r3
 80019be:	401a      	ands	r2, r3
 80019c0:	68bb      	ldr	r3, [r7, #8]
 80019c2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019c4:	69fb      	ldr	r3, [r7, #28]
 80019c6:	fa93 f3a3 	rbit	r3, r3
 80019ca:	61bb      	str	r3, [r7, #24]
  return result;
 80019cc:	69bb      	ldr	r3, [r7, #24]
 80019ce:	fab3 f383 	clz	r3, r3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	005b      	lsls	r3, r3, #1
 80019d6:	6879      	ldr	r1, [r7, #4]
 80019d8:	fa01 f303 	lsl.w	r3, r1, r3
 80019dc:	431a      	orrs	r2, r3
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	601a      	str	r2, [r3, #0]
}
 80019e2:	bf00      	nop
 80019e4:	3724      	adds	r7, #36	; 0x24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr

080019ee <LL_GPIO_SetPinOutputType>:
{
 80019ee:	b480      	push	{r7}
 80019f0:	b085      	sub	sp, #20
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	685a      	ldr	r2, [r3, #4]
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	43db      	mvns	r3, r3
 8001a02:	401a      	ands	r2, r3
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	6879      	ldr	r1, [r7, #4]
 8001a08:	fb01 f303 	mul.w	r3, r1, r3
 8001a0c:	431a      	orrs	r2, r3
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	605a      	str	r2, [r3, #4]
}
 8001a12:	bf00      	nop
 8001a14:	3714      	adds	r7, #20
 8001a16:	46bd      	mov	sp, r7
 8001a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1c:	4770      	bx	lr

08001a1e <LL_GPIO_SetPinSpeed>:
{
 8001a1e:	b480      	push	{r7}
 8001a20:	b089      	sub	sp, #36	; 0x24
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	60f8      	str	r0, [r7, #12]
 8001a26:	60b9      	str	r1, [r7, #8]
 8001a28:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8001a2a:	68fb      	ldr	r3, [r7, #12]
 8001a2c:	689a      	ldr	r2, [r3, #8]
 8001a2e:	68bb      	ldr	r3, [r7, #8]
 8001a30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	fa93 f3a3 	rbit	r3, r3
 8001a38:	613b      	str	r3, [r7, #16]
  return result;
 8001a3a:	693b      	ldr	r3, [r7, #16]
 8001a3c:	fab3 f383 	clz	r3, r3
 8001a40:	b2db      	uxtb	r3, r3
 8001a42:	005b      	lsls	r3, r3, #1
 8001a44:	2103      	movs	r1, #3
 8001a46:	fa01 f303 	lsl.w	r3, r1, r3
 8001a4a:	43db      	mvns	r3, r3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	68bb      	ldr	r3, [r7, #8]
 8001a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a52:	69fb      	ldr	r3, [r7, #28]
 8001a54:	fa93 f3a3 	rbit	r3, r3
 8001a58:	61bb      	str	r3, [r7, #24]
  return result;
 8001a5a:	69bb      	ldr	r3, [r7, #24]
 8001a5c:	fab3 f383 	clz	r3, r3
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	005b      	lsls	r3, r3, #1
 8001a64:	6879      	ldr	r1, [r7, #4]
 8001a66:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6a:	431a      	orrs	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	609a      	str	r2, [r3, #8]
}
 8001a70:	bf00      	nop
 8001a72:	3724      	adds	r7, #36	; 0x24
 8001a74:	46bd      	mov	sp, r7
 8001a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7a:	4770      	bx	lr

08001a7c <LL_GPIO_SetPinPull>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	b089      	sub	sp, #36	; 0x24
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	60f8      	str	r0, [r7, #12]
 8001a84:	60b9      	str	r1, [r7, #8]
 8001a86:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a88:	68fb      	ldr	r3, [r7, #12]
 8001a8a:	68da      	ldr	r2, [r3, #12]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a90:	697b      	ldr	r3, [r7, #20]
 8001a92:	fa93 f3a3 	rbit	r3, r3
 8001a96:	613b      	str	r3, [r7, #16]
  return result;
 8001a98:	693b      	ldr	r3, [r7, #16]
 8001a9a:	fab3 f383 	clz	r3, r3
 8001a9e:	b2db      	uxtb	r3, r3
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	2103      	movs	r1, #3
 8001aa4:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa8:	43db      	mvns	r3, r3
 8001aaa:	401a      	ands	r2, r3
 8001aac:	68bb      	ldr	r3, [r7, #8]
 8001aae:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	fa93 f3a3 	rbit	r3, r3
 8001ab6:	61bb      	str	r3, [r7, #24]
  return result;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	fab3 f383 	clz	r3, r3
 8001abe:	b2db      	uxtb	r3, r3
 8001ac0:	005b      	lsls	r3, r3, #1
 8001ac2:	6879      	ldr	r1, [r7, #4]
 8001ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac8:	431a      	orrs	r2, r3
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	60da      	str	r2, [r3, #12]
}
 8001ace:	bf00      	nop
 8001ad0:	3724      	adds	r7, #36	; 0x24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad8:	4770      	bx	lr

08001ada <LL_GPIO_SetAFPin_0_7>:
{
 8001ada:	b480      	push	{r7}
 8001adc:	b089      	sub	sp, #36	; 0x24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	60f8      	str	r0, [r7, #12]
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001ae6:	68fb      	ldr	r3, [r7, #12]
 8001ae8:	6a1a      	ldr	r2, [r3, #32]
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	697b      	ldr	r3, [r7, #20]
 8001af0:	fa93 f3a3 	rbit	r3, r3
 8001af4:	613b      	str	r3, [r7, #16]
  return result;
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	fab3 f383 	clz	r3, r3
 8001afc:	b2db      	uxtb	r3, r3
 8001afe:	009b      	lsls	r3, r3, #2
 8001b00:	210f      	movs	r1, #15
 8001b02:	fa01 f303 	lsl.w	r3, r1, r3
 8001b06:	43db      	mvns	r3, r3
 8001b08:	401a      	ands	r2, r3
 8001b0a:	68bb      	ldr	r3, [r7, #8]
 8001b0c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b0e:	69fb      	ldr	r3, [r7, #28]
 8001b10:	fa93 f3a3 	rbit	r3, r3
 8001b14:	61bb      	str	r3, [r7, #24]
  return result;
 8001b16:	69bb      	ldr	r3, [r7, #24]
 8001b18:	fab3 f383 	clz	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	6879      	ldr	r1, [r7, #4]
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	431a      	orrs	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	621a      	str	r2, [r3, #32]
}
 8001b2c:	bf00      	nop
 8001b2e:	3724      	adds	r7, #36	; 0x24
 8001b30:	46bd      	mov	sp, r7
 8001b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b36:	4770      	bx	lr

08001b38 <LL_GPIO_SetAFPin_8_15>:
{
 8001b38:	b480      	push	{r7}
 8001b3a:	b089      	sub	sp, #36	; 0x24
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	60f8      	str	r0, [r7, #12]
 8001b40:	60b9      	str	r1, [r7, #8]
 8001b42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b48:	68bb      	ldr	r3, [r7, #8]
 8001b4a:	0a1b      	lsrs	r3, r3, #8
 8001b4c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	fa93 f3a3 	rbit	r3, r3
 8001b54:	613b      	str	r3, [r7, #16]
  return result;
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	fab3 f383 	clz	r3, r3
 8001b5c:	b2db      	uxtb	r3, r3
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	210f      	movs	r1, #15
 8001b62:	fa01 f303 	lsl.w	r3, r1, r3
 8001b66:	43db      	mvns	r3, r3
 8001b68:	401a      	ands	r2, r3
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	0a1b      	lsrs	r3, r3, #8
 8001b6e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b70:	69fb      	ldr	r3, [r7, #28]
 8001b72:	fa93 f3a3 	rbit	r3, r3
 8001b76:	61bb      	str	r3, [r7, #24]
  return result;
 8001b78:	69bb      	ldr	r3, [r7, #24]
 8001b7a:	fab3 f383 	clz	r3, r3
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	009b      	lsls	r3, r3, #2
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b8e:	bf00      	nop
 8001b90:	3724      	adds	r7, #36	; 0x24
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr

08001b9a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b9a:	b580      	push	{r7, lr}
 8001b9c:	b088      	sub	sp, #32
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	6078      	str	r0, [r7, #4]
 8001ba2:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001baa:	697b      	ldr	r3, [r7, #20]
 8001bac:	fa93 f3a3 	rbit	r3, r3
 8001bb0:	613b      	str	r3, [r7, #16]
  return result;
 8001bb2:	693b      	ldr	r3, [r7, #16]
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001bbc:	e051      	b.n	8001c62 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	681a      	ldr	r2, [r3, #0]
 8001bc2:	2101      	movs	r1, #1
 8001bc4:	69fb      	ldr	r3, [r7, #28]
 8001bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bca:	4013      	ands	r3, r2
 8001bcc:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001bce:	69bb      	ldr	r3, [r7, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d043      	beq.n	8001c5c <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d003      	beq.n	8001be4 <LL_GPIO_Init+0x4a>
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d10e      	bne.n	8001c02 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	461a      	mov	r2, r3
 8001bea:	69b9      	ldr	r1, [r7, #24]
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff16 	bl	8001a1e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	6819      	ldr	r1, [r3, #0]
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68db      	ldr	r3, [r3, #12]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f7ff fef6 	bl	80019ee <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001c02:	683b      	ldr	r3, [r7, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	461a      	mov	r2, r3
 8001c08:	69b9      	ldr	r1, [r7, #24]
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f7ff ff36 	bl	8001a7c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685b      	ldr	r3, [r3, #4]
 8001c14:	2b02      	cmp	r3, #2
 8001c16:	d11a      	bne.n	8001c4e <LL_GPIO_Init+0xb4>
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c1c:	68fb      	ldr	r3, [r7, #12]
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	60bb      	str	r3, [r7, #8]
  return result;
 8001c24:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001c26:	fab3 f383 	clz	r3, r3
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	2b07      	cmp	r3, #7
 8001c2e:	d807      	bhi.n	8001c40 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	695b      	ldr	r3, [r3, #20]
 8001c34:	461a      	mov	r2, r3
 8001c36:	69b9      	ldr	r1, [r7, #24]
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff4e 	bl	8001ada <LL_GPIO_SetAFPin_0_7>
 8001c3e:	e006      	b.n	8001c4e <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	461a      	mov	r2, r3
 8001c46:	69b9      	ldr	r1, [r7, #24]
 8001c48:	6878      	ldr	r0, [r7, #4]
 8001c4a:	f7ff ff75 	bl	8001b38 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c4e:	683b      	ldr	r3, [r7, #0]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	461a      	mov	r2, r3
 8001c54:	69b9      	ldr	r1, [r7, #24]
 8001c56:	6878      	ldr	r0, [r7, #4]
 8001c58:	f7ff fe9a 	bl	8001990 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	681a      	ldr	r2, [r3, #0]
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	fa22 f303 	lsr.w	r3, r2, r3
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d1a6      	bne.n	8001bbe <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3720      	adds	r7, #32
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}

08001c7a <LL_TIM_SetPrescaler>:
{
 8001c7a:	b480      	push	{r7}
 8001c7c:	b083      	sub	sp, #12
 8001c7e:	af00      	add	r7, sp, #0
 8001c80:	6078      	str	r0, [r7, #4]
 8001c82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8a:	bf00      	nop
 8001c8c:	370c      	adds	r7, #12
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr

08001c96 <LL_TIM_SetAutoReload>:
{
 8001c96:	b480      	push	{r7}
 8001c98:	b083      	sub	sp, #12
 8001c9a:	af00      	add	r7, sp, #0
 8001c9c:	6078      	str	r0, [r7, #4]
 8001c9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr

08001cb2 <LL_TIM_SetRepetitionCounter>:
{
 8001cb2:	b480      	push	{r7}
 8001cb4:	b083      	sub	sp, #12
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
 8001cba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr

08001cce <LL_TIM_OC_SetCompareCH1>:
{
 8001cce:	b480      	push	{r7}
 8001cd0:	b083      	sub	sp, #12
 8001cd2:	af00      	add	r7, sp, #0
 8001cd4:	6078      	str	r0, [r7, #4]
 8001cd6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	683a      	ldr	r2, [r7, #0]
 8001cdc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cde:	bf00      	nop
 8001ce0:	370c      	adds	r7, #12
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr

08001cea <LL_TIM_OC_SetCompareCH2>:
{
 8001cea:	b480      	push	{r7}
 8001cec:	b083      	sub	sp, #12
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	6078      	str	r0, [r7, #4]
 8001cf2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	683a      	ldr	r2, [r7, #0]
 8001cf8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d04:	4770      	bx	lr

08001d06 <LL_TIM_OC_SetCompareCH3>:
{
 8001d06:	b480      	push	{r7}
 8001d08:	b083      	sub	sp, #12
 8001d0a:	af00      	add	r7, sp, #0
 8001d0c:	6078      	str	r0, [r7, #4]
 8001d0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	683a      	ldr	r2, [r7, #0]
 8001d14:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_TIM_OC_SetCompareCH4>:
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
 8001d2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	683a      	ldr	r2, [r7, #0]
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr

08001d3e <LL_TIM_OC_SetCompareCH5>:
{
 8001d3e:	b480      	push	{r7}
 8001d40:	b083      	sub	sp, #12
 8001d42:	af00      	add	r7, sp, #0
 8001d44:	6078      	str	r0, [r7, #4]
 8001d46:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	683a      	ldr	r2, [r7, #0]
 8001d50:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d52:	bf00      	nop
 8001d54:	370c      	adds	r7, #12
 8001d56:	46bd      	mov	sp, r7
 8001d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5c:	4770      	bx	lr

08001d5e <LL_TIM_OC_SetCompareCH6>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	695b      	ldr	r3, [r3, #20]
 8001d86:	f043 0201 	orr.w	r2, r3, #1
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	615a      	str	r2, [r3, #20]
}
 8001d8e:	bf00      	nop
 8001d90:	370c      	adds	r7, #12
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
	...

08001d9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b084      	sub	sp, #16
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a2f      	ldr	r2, [pc, #188]	; (8001e6c <LL_TIM_Init+0xd0>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d007      	beq.n	8001dc4 <LL_TIM_Init+0x28>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001dba:	d003      	beq.n	8001dc4 <LL_TIM_Init+0x28>
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a2c      	ldr	r2, [pc, #176]	; (8001e70 <LL_TIM_Init+0xd4>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d106      	bne.n	8001dd2 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a25      	ldr	r2, [pc, #148]	; (8001e6c <LL_TIM_Init+0xd0>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d013      	beq.n	8001e02 <LL_TIM_Init+0x66>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001de0:	d00f      	beq.n	8001e02 <LL_TIM_Init+0x66>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a22      	ldr	r2, [pc, #136]	; (8001e70 <LL_TIM_Init+0xd4>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d00b      	beq.n	8001e02 <LL_TIM_Init+0x66>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	4a21      	ldr	r2, [pc, #132]	; (8001e74 <LL_TIM_Init+0xd8>)
 8001dee:	4293      	cmp	r3, r2
 8001df0:	d007      	beq.n	8001e02 <LL_TIM_Init+0x66>
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	4a20      	ldr	r2, [pc, #128]	; (8001e78 <LL_TIM_Init+0xdc>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d003      	beq.n	8001e02 <LL_TIM_Init+0x66>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	4a1f      	ldr	r2, [pc, #124]	; (8001e7c <LL_TIM_Init+0xe0>)
 8001dfe:	4293      	cmp	r3, r2
 8001e00:	d106      	bne.n	8001e10 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	689b      	ldr	r3, [r3, #8]
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ff3a 	bl	8001c96 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	881b      	ldrh	r3, [r3, #0]
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff26 	bl	8001c7a <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	4a0e      	ldr	r2, [pc, #56]	; (8001e6c <LL_TIM_Init+0xd0>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d00b      	beq.n	8001e4e <LL_TIM_Init+0xb2>
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	4a0e      	ldr	r2, [pc, #56]	; (8001e74 <LL_TIM_Init+0xd8>)
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d007      	beq.n	8001e4e <LL_TIM_Init+0xb2>
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <LL_TIM_Init+0xdc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d003      	beq.n	8001e4e <LL_TIM_Init+0xb2>
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4a0c      	ldr	r2, [pc, #48]	; (8001e7c <LL_TIM_Init+0xe0>)
 8001e4a:	4293      	cmp	r3, r2
 8001e4c:	d105      	bne.n	8001e5a <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	7c1b      	ldrb	r3, [r3, #16]
 8001e52:	4619      	mov	r1, r3
 8001e54:	6878      	ldr	r0, [r7, #4]
 8001e56:	f7ff ff2c 	bl	8001cb2 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001e5a:	6878      	ldr	r0, [r7, #4]
 8001e5c:	f7ff ff8d 	bl	8001d7a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001e60:	2300      	movs	r3, #0
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	3710      	adds	r7, #16
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	40012c00 	.word	0x40012c00
 8001e70:	40000400 	.word	0x40000400
 8001e74:	40014000 	.word	0x40014000
 8001e78:	40014400 	.word	0x40014400
 8001e7c:	40014800 	.word	0x40014800

08001e80 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	60f8      	str	r0, [r7, #12]
 8001e88:	60b9      	str	r1, [r7, #8]
 8001e8a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001e90:	68bb      	ldr	r3, [r7, #8]
 8001e92:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e96:	d01f      	beq.n	8001ed8 <LL_TIM_OC_Init+0x58>
 8001e98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9c:	d804      	bhi.n	8001ea8 <LL_TIM_OC_Init+0x28>
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d00c      	beq.n	8001ebc <LL_TIM_OC_Init+0x3c>
 8001ea2:	2b10      	cmp	r3, #16
 8001ea4:	d011      	beq.n	8001eca <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001ea6:	e033      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001ea8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001eac:	d022      	beq.n	8001ef4 <LL_TIM_OC_Init+0x74>
 8001eae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001eb2:	d026      	beq.n	8001f02 <LL_TIM_OC_Init+0x82>
 8001eb4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001eb8:	d015      	beq.n	8001ee6 <LL_TIM_OC_Init+0x66>
      break;
 8001eba:	e029      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001ebc:	6879      	ldr	r1, [r7, #4]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f000 f82c 	bl	8001f1c <OC1Config>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec8:	e022      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	68f8      	ldr	r0, [r7, #12]
 8001ece:	f000 f89f 	bl	8002010 <OC2Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ed6:	e01b      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001ed8:	6879      	ldr	r1, [r7, #4]
 8001eda:	68f8      	ldr	r0, [r7, #12]
 8001edc:	f000 f916 	bl	800210c <OC3Config>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee4:	e014      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001ee6:	6879      	ldr	r1, [r7, #4]
 8001ee8:	68f8      	ldr	r0, [r7, #12]
 8001eea:	f000 f98d 	bl	8002208 <OC4Config>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ef2:	e00d      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001ef4:	6879      	ldr	r1, [r7, #4]
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	f000 f9ec 	bl	80022d4 <OC5Config>
 8001efc:	4603      	mov	r3, r0
 8001efe:	75fb      	strb	r3, [r7, #23]
      break;
 8001f00:	e006      	b.n	8001f10 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001f02:	6879      	ldr	r1, [r7, #4]
 8001f04:	68f8      	ldr	r0, [r7, #12]
 8001f06:	f000 fa43 	bl	8002390 <OC6Config>
 8001f0a:	4603      	mov	r3, r0
 8001f0c:	75fb      	strb	r3, [r7, #23]
      break;
 8001f0e:	bf00      	nop
  }

  return result;
 8001f10:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3718      	adds	r7, #24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
	...

08001f1c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b086      	sub	sp, #24
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
 8001f24:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6a1b      	ldr	r3, [r3, #32]
 8001f2a:	f023 0201 	bic.w	r2, r3, #1
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	f023 0303 	bic.w	r3, r3, #3
 8001f4a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	6812      	ldr	r2, [r2, #0]
 8001f5a:	4313      	orrs	r3, r2
 8001f5c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f5e:	697b      	ldr	r3, [r7, #20]
 8001f60:	f023 0202 	bic.w	r2, r3, #2
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	691b      	ldr	r3, [r3, #16]
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001f6c:	697b      	ldr	r3, [r7, #20]
 8001f6e:	f023 0201 	bic.w	r2, r3, #1
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	4313      	orrs	r3, r2
 8001f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a20      	ldr	r2, [pc, #128]	; (8002000 <OC1Config+0xe4>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d00b      	beq.n	8001f9a <OC1Config+0x7e>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a1f      	ldr	r2, [pc, #124]	; (8002004 <OC1Config+0xe8>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d007      	beq.n	8001f9a <OC1Config+0x7e>
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	4a1e      	ldr	r2, [pc, #120]	; (8002008 <OC1Config+0xec>)
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d003      	beq.n	8001f9a <OC1Config+0x7e>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	4a1d      	ldr	r2, [pc, #116]	; (800200c <OC1Config+0xf0>)
 8001f96:	4293      	cmp	r3, r2
 8001f98:	d11e      	bne.n	8001fd8 <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f023 0208 	bic.w	r2, r3, #8
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	695b      	ldr	r3, [r3, #20]
 8001fa4:	009b      	lsls	r3, r3, #2
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001faa:	697b      	ldr	r3, [r7, #20]
 8001fac:	f023 0204 	bic.w	r2, r3, #4
 8001fb0:	683b      	ldr	r3, [r7, #0]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	4313      	orrs	r3, r2
 8001fb8:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	699b      	ldr	r3, [r3, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	69db      	ldr	r3, [r3, #28]
 8001fd2:	005b      	lsls	r3, r3, #1
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	693a      	ldr	r2, [r7, #16]
 8001fdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	68fa      	ldr	r2, [r7, #12]
 8001fe2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	6878      	ldr	r0, [r7, #4]
 8001fec:	f7ff fe6f 	bl	8001cce <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	697a      	ldr	r2, [r7, #20]
 8001ff4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3718      	adds	r7, #24
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40014000 	.word	0x40014000
 8002008:	40014400 	.word	0x40014400
 800200c:	40014800 	.word	0x40014800

08002010 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b086      	sub	sp, #24
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
 8002018:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	6a1b      	ldr	r3, [r3, #32]
 800201e:	f023 0210 	bic.w	r2, r3, #16
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6a1b      	ldr	r3, [r3, #32]
 800202a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	685b      	ldr	r3, [r3, #4]
 8002030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	699b      	ldr	r3, [r3, #24]
 8002036:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800203e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002046:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	6812      	ldr	r2, [r2, #0]
 800204e:	0212      	lsls	r2, r2, #8
 8002050:	4313      	orrs	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002054:	697b      	ldr	r3, [r7, #20]
 8002056:	f023 0220 	bic.w	r2, r3, #32
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	691b      	ldr	r3, [r3, #16]
 800205e:	011b      	lsls	r3, r3, #4
 8002060:	4313      	orrs	r3, r2
 8002062:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002064:	697b      	ldr	r3, [r7, #20]
 8002066:	f023 0210 	bic.w	r2, r3, #16
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	685b      	ldr	r3, [r3, #4]
 800206e:	011b      	lsls	r3, r3, #4
 8002070:	4313      	orrs	r3, r2
 8002072:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	4a21      	ldr	r2, [pc, #132]	; (80020fc <OC2Config+0xec>)
 8002078:	4293      	cmp	r3, r2
 800207a:	d00b      	beq.n	8002094 <OC2Config+0x84>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	4a20      	ldr	r2, [pc, #128]	; (8002100 <OC2Config+0xf0>)
 8002080:	4293      	cmp	r3, r2
 8002082:	d007      	beq.n	8002094 <OC2Config+0x84>
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <OC2Config+0xf4>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d003      	beq.n	8002094 <OC2Config+0x84>
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	4a1e      	ldr	r2, [pc, #120]	; (8002108 <OC2Config+0xf8>)
 8002090:	4293      	cmp	r3, r2
 8002092:	d11f      	bne.n	80020d4 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002094:	697b      	ldr	r3, [r7, #20]
 8002096:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800209a:	683b      	ldr	r3, [r7, #0]
 800209c:	695b      	ldr	r3, [r3, #20]
 800209e:	019b      	lsls	r3, r3, #6
 80020a0:	4313      	orrs	r3, r2
 80020a2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	689b      	ldr	r3, [r3, #8]
 80020ae:	019b      	lsls	r3, r3, #6
 80020b0:	4313      	orrs	r3, r2
 80020b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	4313      	orrs	r3, r2
 80020c2:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80020c4:	693b      	ldr	r3, [r7, #16]
 80020c6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	69db      	ldr	r3, [r3, #28]
 80020ce:	00db      	lsls	r3, r3, #3
 80020d0:	4313      	orrs	r3, r2
 80020d2:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	693a      	ldr	r2, [r7, #16]
 80020d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff fdff 	bl	8001cea <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	697a      	ldr	r2, [r7, #20]
 80020f0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020f2:	2300      	movs	r3, #0
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	40012c00 	.word	0x40012c00
 8002100:	40014000 	.word	0x40014000
 8002104:	40014400 	.word	0x40014400
 8002108:	40014800 	.word	0x40014800

0800210c <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6a1b      	ldr	r3, [r3, #32]
 800211a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	685b      	ldr	r3, [r3, #4]
 800212c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	f023 0303 	bic.w	r3, r3, #3
 800213a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 800213c:	68fb      	ldr	r3, [r7, #12]
 800213e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	6812      	ldr	r2, [r2, #0]
 800214a:	4313      	orrs	r3, r2
 800214c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	691b      	ldr	r3, [r3, #16]
 8002158:	021b      	lsls	r3, r3, #8
 800215a:	4313      	orrs	r3, r2
 800215c:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	685b      	ldr	r3, [r3, #4]
 8002168:	021b      	lsls	r3, r3, #8
 800216a:	4313      	orrs	r3, r2
 800216c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a21      	ldr	r2, [pc, #132]	; (80021f8 <OC3Config+0xec>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d00b      	beq.n	800218e <OC3Config+0x82>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a20      	ldr	r2, [pc, #128]	; (80021fc <OC3Config+0xf0>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d007      	beq.n	800218e <OC3Config+0x82>
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	4a1f      	ldr	r2, [pc, #124]	; (8002200 <OC3Config+0xf4>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d003      	beq.n	800218e <OC3Config+0x82>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	4a1e      	ldr	r2, [pc, #120]	; (8002204 <OC3Config+0xf8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d11f      	bne.n	80021ce <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	029b      	lsls	r3, r3, #10
 800219a:	4313      	orrs	r3, r2
 800219c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800219e:	697b      	ldr	r3, [r7, #20]
 80021a0:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	689b      	ldr	r3, [r3, #8]
 80021a8:	029b      	lsls	r3, r3, #10
 80021aa:	4313      	orrs	r3, r2
 80021ac:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 80021ae:	693b      	ldr	r3, [r7, #16]
 80021b0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	699b      	ldr	r3, [r3, #24]
 80021b8:	011b      	lsls	r3, r3, #4
 80021ba:	4313      	orrs	r3, r2
 80021bc:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80021be:	693b      	ldr	r3, [r7, #16]
 80021c0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	69db      	ldr	r3, [r3, #28]
 80021c8:	015b      	lsls	r3, r3, #5
 80021ca:	4313      	orrs	r3, r2
 80021cc:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	693a      	ldr	r2, [r7, #16]
 80021d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	68fa      	ldr	r2, [r7, #12]
 80021d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021da:	683b      	ldr	r3, [r7, #0]
 80021dc:	68db      	ldr	r3, [r3, #12]
 80021de:	4619      	mov	r1, r3
 80021e0:	6878      	ldr	r0, [r7, #4]
 80021e2:	f7ff fd90 	bl	8001d06 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021ec:	2300      	movs	r3, #0
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3718      	adds	r7, #24
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
 80021f6:	bf00      	nop
 80021f8:	40012c00 	.word	0x40012c00
 80021fc:	40014000 	.word	0x40014000
 8002200:	40014400 	.word	0x40014400
 8002204:	40014800 	.word	0x40014800

08002208 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b086      	sub	sp, #24
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
 8002210:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	685b      	ldr	r3, [r3, #4]
 8002228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002238:	68fb      	ldr	r3, [r7, #12]
 800223a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800223e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002242:	683a      	ldr	r2, [r7, #0]
 8002244:	6812      	ldr	r2, [r2, #0]
 8002246:	0212      	lsls	r2, r2, #8
 8002248:	4313      	orrs	r3, r2
 800224a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	691b      	ldr	r3, [r3, #16]
 8002256:	031b      	lsls	r3, r3, #12
 8002258:	4313      	orrs	r3, r2
 800225a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	685b      	ldr	r3, [r3, #4]
 8002266:	031b      	lsls	r3, r3, #12
 8002268:	4313      	orrs	r3, r2
 800226a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	4a15      	ldr	r2, [pc, #84]	; (80022c4 <OC4Config+0xbc>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d00b      	beq.n	800228c <OC4Config+0x84>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	4a14      	ldr	r2, [pc, #80]	; (80022c8 <OC4Config+0xc0>)
 8002278:	4293      	cmp	r3, r2
 800227a:	d007      	beq.n	800228c <OC4Config+0x84>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	4a13      	ldr	r2, [pc, #76]	; (80022cc <OC4Config+0xc4>)
 8002280:	4293      	cmp	r3, r2
 8002282:	d003      	beq.n	800228c <OC4Config+0x84>
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	4a12      	ldr	r2, [pc, #72]	; (80022d0 <OC4Config+0xc8>)
 8002288:	4293      	cmp	r3, r2
 800228a:	d107      	bne.n	800229c <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	699b      	ldr	r3, [r3, #24]
 8002296:	019b      	lsls	r3, r3, #6
 8002298:	4313      	orrs	r3, r2
 800229a:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	697a      	ldr	r2, [r7, #20]
 80022a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	68db      	ldr	r3, [r3, #12]
 80022ac:	4619      	mov	r1, r3
 80022ae:	6878      	ldr	r0, [r7, #4]
 80022b0:	f7ff fd37 	bl	8001d22 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3718      	adds	r7, #24
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40012c00 	.word	0x40012c00
 80022c8:	40014000 	.word	0x40014000
 80022cc:	40014400 	.word	0x40014400
 80022d0:	40014800 	.word	0x40014800

080022d4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
 80022dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	6a1b      	ldr	r3, [r3, #32]
 80022e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6a1b      	ldr	r3, [r3, #32]
 80022ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	6812      	ldr	r2, [r2, #0]
 8002304:	4313      	orrs	r3, r2
 8002306:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	041b      	lsls	r3, r3, #16
 8002314:	4313      	orrs	r3, r2
 8002316:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	041b      	lsls	r3, r3, #16
 8002324:	4313      	orrs	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	4a15      	ldr	r2, [pc, #84]	; (8002380 <OC5Config+0xac>)
 800232c:	4293      	cmp	r3, r2
 800232e:	d00b      	beq.n	8002348 <OC5Config+0x74>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	4a14      	ldr	r2, [pc, #80]	; (8002384 <OC5Config+0xb0>)
 8002334:	4293      	cmp	r3, r2
 8002336:	d007      	beq.n	8002348 <OC5Config+0x74>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	4a13      	ldr	r2, [pc, #76]	; (8002388 <OC5Config+0xb4>)
 800233c:	4293      	cmp	r3, r2
 800233e:	d003      	beq.n	8002348 <OC5Config+0x74>
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	4a12      	ldr	r2, [pc, #72]	; (800238c <OC5Config+0xb8>)
 8002344:	4293      	cmp	r3, r2
 8002346:	d109      	bne.n	800235c <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	699b      	ldr	r3, [r3, #24]
 8002354:	021b      	lsls	r3, r3, #8
 8002356:	431a      	orrs	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	4619      	mov	r1, r3
 8002368:	6878      	ldr	r0, [r7, #4]
 800236a:	f7ff fce8 	bl	8001d3e <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	68fa      	ldr	r2, [r7, #12]
 8002372:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	3710      	adds	r7, #16
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
 800237e:	bf00      	nop
 8002380:	40012c00 	.word	0x40012c00
 8002384:	40014000 	.word	0x40014000
 8002388:	40014400 	.word	0x40014400
 800238c:	40014800 	.word	0x40014800

08002390 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
 8002398:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023b0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80023b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80023bc:	683a      	ldr	r2, [r7, #0]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	0212      	lsls	r2, r2, #8
 80023c2:	4313      	orrs	r3, r2
 80023c4:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80023c6:	68fb      	ldr	r3, [r7, #12]
 80023c8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	691b      	ldr	r3, [r3, #16]
 80023d0:	051b      	lsls	r3, r3, #20
 80023d2:	4313      	orrs	r3, r2
 80023d4:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	051b      	lsls	r3, r3, #20
 80023e2:	4313      	orrs	r3, r2
 80023e4:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4a14      	ldr	r2, [pc, #80]	; (800243c <OC6Config+0xac>)
 80023ea:	4293      	cmp	r3, r2
 80023ec:	d00b      	beq.n	8002406 <OC6Config+0x76>
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	4a13      	ldr	r2, [pc, #76]	; (8002440 <OC6Config+0xb0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d007      	beq.n	8002406 <OC6Config+0x76>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4a12      	ldr	r2, [pc, #72]	; (8002444 <OC6Config+0xb4>)
 80023fa:	4293      	cmp	r3, r2
 80023fc:	d003      	beq.n	8002406 <OC6Config+0x76>
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	4a11      	ldr	r2, [pc, #68]	; (8002448 <OC6Config+0xb8>)
 8002402:	4293      	cmp	r3, r2
 8002404:	d109      	bne.n	800241a <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	699b      	ldr	r3, [r3, #24]
 8002412:	029b      	lsls	r3, r3, #10
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68ba      	ldr	r2, [r7, #8]
 800241e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	68db      	ldr	r3, [r3, #12]
 8002424:	4619      	mov	r1, r3
 8002426:	6878      	ldr	r0, [r7, #4]
 8002428:	f7ff fc99 	bl	8001d5e <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	68fa      	ldr	r2, [r7, #12]
 8002430:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3710      	adds	r7, #16
 8002438:	46bd      	mov	sp, r7
 800243a:	bd80      	pop	{r7, pc}
 800243c:	40012c00 	.word	0x40012c00
 8002440:	40014000 	.word	0x40014000
 8002444:	40014400 	.word	0x40014400
 8002448:	40014800 	.word	0x40014800

0800244c <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 800244c:	b480      	push	{r7}
 800244e:	b083      	sub	sp, #12
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002454:	4a04      	ldr	r2, [pc, #16]	; (8002468 <LL_SetSystemCoreClock+0x1c>)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	6013      	str	r3, [r2, #0]
}
 800245a:	bf00      	nop
 800245c:	370c      	adds	r7, #12
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	20000004 	.word	0x20000004

0800246c <__libc_init_array>:
 800246c:	b570      	push	{r4, r5, r6, lr}
 800246e:	4e0d      	ldr	r6, [pc, #52]	; (80024a4 <__libc_init_array+0x38>)
 8002470:	4c0d      	ldr	r4, [pc, #52]	; (80024a8 <__libc_init_array+0x3c>)
 8002472:	1ba4      	subs	r4, r4, r6
 8002474:	10a4      	asrs	r4, r4, #2
 8002476:	2500      	movs	r5, #0
 8002478:	42a5      	cmp	r5, r4
 800247a:	d109      	bne.n	8002490 <__libc_init_array+0x24>
 800247c:	4e0b      	ldr	r6, [pc, #44]	; (80024ac <__libc_init_array+0x40>)
 800247e:	4c0c      	ldr	r4, [pc, #48]	; (80024b0 <__libc_init_array+0x44>)
 8002480:	f000 f820 	bl	80024c4 <_init>
 8002484:	1ba4      	subs	r4, r4, r6
 8002486:	10a4      	asrs	r4, r4, #2
 8002488:	2500      	movs	r5, #0
 800248a:	42a5      	cmp	r5, r4
 800248c:	d105      	bne.n	800249a <__libc_init_array+0x2e>
 800248e:	bd70      	pop	{r4, r5, r6, pc}
 8002490:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002494:	4798      	blx	r3
 8002496:	3501      	adds	r5, #1
 8002498:	e7ee      	b.n	8002478 <__libc_init_array+0xc>
 800249a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800249e:	4798      	blx	r3
 80024a0:	3501      	adds	r5, #1
 80024a2:	e7f2      	b.n	800248a <__libc_init_array+0x1e>
 80024a4:	080024f4 	.word	0x080024f4
 80024a8:	080024f4 	.word	0x080024f4
 80024ac:	080024f4 	.word	0x080024f4
 80024b0:	080024f8 	.word	0x080024f8

080024b4 <memset>:
 80024b4:	4402      	add	r2, r0
 80024b6:	4603      	mov	r3, r0
 80024b8:	4293      	cmp	r3, r2
 80024ba:	d100      	bne.n	80024be <memset+0xa>
 80024bc:	4770      	bx	lr
 80024be:	f803 1b01 	strb.w	r1, [r3], #1
 80024c2:	e7f9      	b.n	80024b8 <memset+0x4>

080024c4 <_init>:
 80024c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024c6:	bf00      	nop
 80024c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024ca:	bc08      	pop	{r3}
 80024cc:	469e      	mov	lr, r3
 80024ce:	4770      	bx	lr

080024d0 <_fini>:
 80024d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024d2:	bf00      	nop
 80024d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024d6:	bc08      	pop	{r3}
 80024d8:	469e      	mov	lr, r3
 80024da:	4770      	bx	lr
