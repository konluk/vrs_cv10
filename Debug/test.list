
test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002328  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  080024b0  080024b0  000124b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080024c8  080024c8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080024c8  080024c8  000124c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080024cc  080024cc  000124cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080024d0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  080024dc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  080024dc  00020070  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009134  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000016c3  00000000  00000000  00029170  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  0002a838  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000af8  00000000  00000000  0002b3e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018905  00000000  00000000  0002bee0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000771d  00000000  00000000  000447e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008e870  00000000  00000000  0004bf02  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000da772  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000317c  00000000  00000000  000da7f0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002498 	.word	0x08002498

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002498 	.word	0x08002498

080001c8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80001c8:	b480      	push	{r7}
 80001ca:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80001cc:	4b05      	ldr	r3, [pc, #20]	; (80001e4 <LL_RCC_HSI_Enable+0x1c>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a04      	ldr	r2, [pc, #16]	; (80001e4 <LL_RCC_HSI_Enable+0x1c>)
 80001d2:	f043 0301 	orr.w	r3, r3, #1
 80001d6:	6013      	str	r3, [r2, #0]
}
 80001d8:	bf00      	nop
 80001da:	46bd      	mov	sp, r7
 80001dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e0:	4770      	bx	lr
 80001e2:	bf00      	nop
 80001e4:	40021000 	.word	0x40021000

080001e8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80001e8:	b480      	push	{r7}
 80001ea:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY));
 80001ec:	4b06      	ldr	r3, [pc, #24]	; (8000208 <LL_RCC_HSI_IsReady+0x20>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f003 0302 	and.w	r3, r3, #2
 80001f4:	2b02      	cmp	r3, #2
 80001f6:	bf0c      	ite	eq
 80001f8:	2301      	moveq	r3, #1
 80001fa:	2300      	movne	r3, #0
 80001fc:	b2db      	uxtb	r3, r3
}
 80001fe:	4618      	mov	r0, r3
 8000200:	46bd      	mov	sp, r7
 8000202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000206:	4770      	bx	lr
 8000208:	40021000 	.word	0x40021000

0800020c <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll CR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value between Min_Data = 0x00 and Max_Data = 0x1F
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 800020c:	b480      	push	{r7}
 800020e:	b083      	sub	sp, #12
 8000210:	af00      	add	r7, sp, #0
 8000212:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSITRIM, Value << RCC_CR_HSITRIM_Pos);
 8000214:	4b07      	ldr	r3, [pc, #28]	; (8000234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800021c:	687b      	ldr	r3, [r7, #4]
 800021e:	00db      	lsls	r3, r3, #3
 8000220:	4904      	ldr	r1, [pc, #16]	; (8000234 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000222:	4313      	orrs	r3, r2
 8000224:	600b      	str	r3, [r1, #0]
}
 8000226:	bf00      	nop
 8000228:	370c      	adds	r7, #12
 800022a:	46bd      	mov	sp, r7
 800022c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000230:	4770      	bx	lr
 8000232:	bf00      	nop
 8000234:	40021000 	.word	0x40021000

08000238 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000238:	b480      	push	{r7}
 800023a:	b083      	sub	sp, #12
 800023c:	af00      	add	r7, sp, #0
 800023e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000240:	4b06      	ldr	r3, [pc, #24]	; (800025c <LL_RCC_SetSysClkSource+0x24>)
 8000242:	685b      	ldr	r3, [r3, #4]
 8000244:	f023 0203 	bic.w	r2, r3, #3
 8000248:	4904      	ldr	r1, [pc, #16]	; (800025c <LL_RCC_SetSysClkSource+0x24>)
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	4313      	orrs	r3, r2
 800024e:	604b      	str	r3, [r1, #4]
}
 8000250:	bf00      	nop
 8000252:	370c      	adds	r7, #12
 8000254:	46bd      	mov	sp, r7
 8000256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025a:	4770      	bx	lr
 800025c:	40021000 	.word	0x40021000

08000260 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000260:	b480      	push	{r7}
 8000262:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000264:	4b04      	ldr	r3, [pc, #16]	; (8000278 <LL_RCC_GetSysClkSource+0x18>)
 8000266:	685b      	ldr	r3, [r3, #4]
 8000268:	f003 030c 	and.w	r3, r3, #12
}
 800026c:	4618      	mov	r0, r3
 800026e:	46bd      	mov	sp, r7
 8000270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000274:	4770      	bx	lr
 8000276:	bf00      	nop
 8000278:	40021000 	.word	0x40021000

0800027c <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 800027c:	b480      	push	{r7}
 800027e:	b083      	sub	sp, #12
 8000280:	af00      	add	r7, sp, #0
 8000282:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000284:	4b06      	ldr	r3, [pc, #24]	; (80002a0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000286:	685b      	ldr	r3, [r3, #4]
 8000288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800028c:	4904      	ldr	r1, [pc, #16]	; (80002a0 <LL_RCC_SetAHBPrescaler+0x24>)
 800028e:	687b      	ldr	r3, [r7, #4]
 8000290:	4313      	orrs	r3, r2
 8000292:	604b      	str	r3, [r1, #4]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40021000 	.word	0x40021000

080002a4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80002ac:	4b06      	ldr	r3, [pc, #24]	; (80002c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002ae:	685b      	ldr	r3, [r3, #4]
 80002b0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80002b4:	4904      	ldr	r1, [pc, #16]	; (80002c8 <LL_RCC_SetAPB1Prescaler+0x24>)
 80002b6:	687b      	ldr	r3, [r7, #4]
 80002b8:	4313      	orrs	r3, r2
 80002ba:	604b      	str	r3, [r1, #4]
}
 80002bc:	bf00      	nop
 80002be:	370c      	adds	r7, #12
 80002c0:	46bd      	mov	sp, r7
 80002c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002c6:	4770      	bx	lr
 80002c8:	40021000 	.word	0x40021000

080002cc <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80002cc:	b480      	push	{r7}
 80002ce:	b083      	sub	sp, #12
 80002d0:	af00      	add	r7, sp, #0
 80002d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80002d4:	4b06      	ldr	r3, [pc, #24]	; (80002f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002d6:	685b      	ldr	r3, [r3, #4]
 80002d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80002dc:	4904      	ldr	r1, [pc, #16]	; (80002f0 <LL_RCC_SetAPB2Prescaler+0x24>)
 80002de:	687b      	ldr	r3, [r7, #4]
 80002e0:	4313      	orrs	r3, r2
 80002e2:	604b      	str	r3, [r1, #4]
}
 80002e4:	bf00      	nop
 80002e6:	370c      	adds	r7, #12
 80002e8:	46bd      	mov	sp, r7
 80002ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ee:	4770      	bx	lr
 80002f0:	40021000 	.word	0x40021000

080002f4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b085      	sub	sp, #20
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHBENR, Periphs);
 80002fc:	4b08      	ldr	r3, [pc, #32]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80002fe:	695a      	ldr	r2, [r3, #20]
 8000300:	4907      	ldr	r1, [pc, #28]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4313      	orrs	r3, r2
 8000306:	614b      	str	r3, [r1, #20]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHBENR, Periphs);
 8000308:	4b05      	ldr	r3, [pc, #20]	; (8000320 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800030a:	695a      	ldr	r2, [r3, #20]
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	4013      	ands	r3, r2
 8000310:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000312:	68fb      	ldr	r3, [r7, #12]
}
 8000314:	bf00      	nop
 8000316:	3714      	adds	r7, #20
 8000318:	46bd      	mov	sp, r7
 800031a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031e:	4770      	bx	lr
 8000320:	40021000 	.word	0x40021000

08000324 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000324:	b480      	push	{r7}
 8000326:	b085      	sub	sp, #20
 8000328:	af00      	add	r7, sp, #0
 800032a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 800032c:	4b08      	ldr	r3, [pc, #32]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800032e:	69da      	ldr	r2, [r3, #28]
 8000330:	4907      	ldr	r1, [pc, #28]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4313      	orrs	r3, r2
 8000336:	61cb      	str	r3, [r1, #28]
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000338:	4b05      	ldr	r3, [pc, #20]	; (8000350 <LL_APB1_GRP1_EnableClock+0x2c>)
 800033a:	69da      	ldr	r2, [r3, #28]
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	4013      	ands	r3, r2
 8000340:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000342:	68fb      	ldr	r3, [r7, #12]
}
 8000344:	bf00      	nop
 8000346:	3714      	adds	r7, #20
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr
 8000350:	40021000 	.word	0x40021000

08000354 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000354:	b480      	push	{r7}
 8000356:	b083      	sub	sp, #12
 8000358:	af00      	add	r7, sp, #0
 800035a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800035c:	4b06      	ldr	r3, [pc, #24]	; (8000378 <LL_FLASH_SetLatency+0x24>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	f023 0207 	bic.w	r2, r3, #7
 8000364:	4904      	ldr	r1, [pc, #16]	; (8000378 <LL_FLASH_SetLatency+0x24>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	4313      	orrs	r3, r2
 800036a:	600b      	str	r3, [r1, #0]
}
 800036c:	bf00      	nop
 800036e:	370c      	adds	r7, #12
 8000370:	46bd      	mov	sp, r7
 8000372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000376:	4770      	bx	lr
 8000378:	40022000 	.word	0x40022000

0800037c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_0
  *         @arg @ref LL_FLASH_LATENCY_1
  *         @arg @ref LL_FLASH_LATENCY_2
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800037c:	b480      	push	{r7}
 800037e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000380:	4b04      	ldr	r3, [pc, #16]	; (8000394 <LL_FLASH_GetLatency+0x18>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	f003 0307 	and.w	r3, r3, #7
}
 8000388:	4618      	mov	r0, r3
 800038a:	46bd      	mov	sp, r7
 800038c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000390:	4770      	bx	lr
 8000392:	bf00      	nop
 8000394:	40022000 	.word	0x40022000

08000398 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000398:	b480      	push	{r7}
 800039a:	b083      	sub	sp, #12
 800039c:	af00      	add	r7, sp, #0
 800039e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	f043 0201 	orr.w	r2, r3, #1
 80003a8:	687b      	ldr	r3, [r7, #4]
 80003aa:	601a      	str	r2, [r3, #0]
}
 80003ac:	bf00      	nop
 80003ae:	370c      	adds	r7, #12
 80003b0:	46bd      	mov	sp, r7
 80003b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b6:	4770      	bx	lr

080003b8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80003b8:	b480      	push	{r7}
 80003ba:	b083      	sub	sp, #12
 80003bc:	af00      	add	r7, sp, #0
 80003be:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80003c0:	687b      	ldr	r3, [r7, #4]
 80003c2:	681b      	ldr	r3, [r3, #0]
 80003c4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	601a      	str	r2, [r3, #0]
}
 80003cc:	bf00      	nop
 80003ce:	370c      	adds	r7, #12
 80003d0:	46bd      	mov	sp, r7
 80003d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d6:	4770      	bx	lr

080003d8 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 80003d8:	b480      	push	{r7}
 80003da:	b083      	sub	sp, #12
 80003dc:	af00      	add	r7, sp, #0
 80003de:	6078      	str	r0, [r7, #4]
 80003e0:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 80003e2:	687b      	ldr	r3, [r7, #4]
 80003e4:	6a1a      	ldr	r2, [r3, #32]
 80003e6:	683b      	ldr	r3, [r7, #0]
 80003e8:	431a      	orrs	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	621a      	str	r2, [r3, #32]
}
 80003ee:	bf00      	nop
 80003f0:	370c      	adds	r7, #12
 80003f2:	46bd      	mov	sp, r7
 80003f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f8:	4770      	bx	lr
	...

080003fc <LL_TIM_OC_DisableFast>:
  * @note   OC5FE and OC6FE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80003fc:	b4b0      	push	{r4, r5, r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
 8000404:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000406:	683b      	ldr	r3, [r7, #0]
 8000408:	2b01      	cmp	r3, #1
 800040a:	d028      	beq.n	800045e <LL_TIM_OC_DisableFast+0x62>
 800040c:	683b      	ldr	r3, [r7, #0]
 800040e:	2b04      	cmp	r3, #4
 8000410:	d023      	beq.n	800045a <LL_TIM_OC_DisableFast+0x5e>
 8000412:	683b      	ldr	r3, [r7, #0]
 8000414:	2b10      	cmp	r3, #16
 8000416:	d01e      	beq.n	8000456 <LL_TIM_OC_DisableFast+0x5a>
 8000418:	683b      	ldr	r3, [r7, #0]
 800041a:	2b40      	cmp	r3, #64	; 0x40
 800041c:	d019      	beq.n	8000452 <LL_TIM_OC_DisableFast+0x56>
 800041e:	683b      	ldr	r3, [r7, #0]
 8000420:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000424:	d013      	beq.n	800044e <LL_TIM_OC_DisableFast+0x52>
 8000426:	683b      	ldr	r3, [r7, #0]
 8000428:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800042c:	d00d      	beq.n	800044a <LL_TIM_OC_DisableFast+0x4e>
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000434:	d007      	beq.n	8000446 <LL_TIM_OC_DisableFast+0x4a>
 8000436:	683b      	ldr	r3, [r7, #0]
 8000438:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800043c:	d101      	bne.n	8000442 <LL_TIM_OC_DisableFast+0x46>
 800043e:	2307      	movs	r3, #7
 8000440:	e00e      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000442:	2308      	movs	r3, #8
 8000444:	e00c      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000446:	2306      	movs	r3, #6
 8000448:	e00a      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800044a:	2305      	movs	r3, #5
 800044c:	e008      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800044e:	2304      	movs	r3, #4
 8000450:	e006      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000452:	2303      	movs	r3, #3
 8000454:	e004      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 8000456:	2302      	movs	r3, #2
 8000458:	e002      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800045a:	2301      	movs	r3, #1
 800045c:	e000      	b.n	8000460 <LL_TIM_OC_DisableFast+0x64>
 800045e:	2300      	movs	r3, #0
 8000460:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8000462:	687b      	ldr	r3, [r7, #4]
 8000464:	3318      	adds	r3, #24
 8000466:	461a      	mov	r2, r3
 8000468:	4629      	mov	r1, r5
 800046a:	4b09      	ldr	r3, [pc, #36]	; (8000490 <LL_TIM_OC_DisableFast+0x94>)
 800046c:	5c5b      	ldrb	r3, [r3, r1]
 800046e:	4413      	add	r3, r2
 8000470:	461c      	mov	r4, r3
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8000472:	6822      	ldr	r2, [r4, #0]
 8000474:	4629      	mov	r1, r5
 8000476:	4b07      	ldr	r3, [pc, #28]	; (8000494 <LL_TIM_OC_DisableFast+0x98>)
 8000478:	5c5b      	ldrb	r3, [r3, r1]
 800047a:	4619      	mov	r1, r3
 800047c:	2304      	movs	r3, #4
 800047e:	408b      	lsls	r3, r1
 8000480:	43db      	mvns	r3, r3
 8000482:	4013      	ands	r3, r2
 8000484:	6023      	str	r3, [r4, #0]

}
 8000486:	bf00      	nop
 8000488:	370c      	adds	r7, #12
 800048a:	46bd      	mov	sp, r7
 800048c:	bcb0      	pop	{r4, r5, r7}
 800048e:	4770      	bx	lr
 8000490:	080024b0 	.word	0x080024b0
 8000494:	080024bc 	.word	0x080024bc

08000498 <LL_TIM_OC_EnablePreload>:
  * @note   OC5PE and OC6PE are not available for all F3 devices
  * @note   CH5 and CH6 channels are not available for all F3 devices
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000498:	b4b0      	push	{r4, r5, r7}
 800049a:	b083      	sub	sp, #12
 800049c:	af00      	add	r7, sp, #0
 800049e:	6078      	str	r0, [r7, #4]
 80004a0:	6039      	str	r1, [r7, #0]
  register uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	2b01      	cmp	r3, #1
 80004a6:	d028      	beq.n	80004fa <LL_TIM_OC_EnablePreload+0x62>
 80004a8:	683b      	ldr	r3, [r7, #0]
 80004aa:	2b04      	cmp	r3, #4
 80004ac:	d023      	beq.n	80004f6 <LL_TIM_OC_EnablePreload+0x5e>
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	2b10      	cmp	r3, #16
 80004b2:	d01e      	beq.n	80004f2 <LL_TIM_OC_EnablePreload+0x5a>
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	2b40      	cmp	r3, #64	; 0x40
 80004b8:	d019      	beq.n	80004ee <LL_TIM_OC_EnablePreload+0x56>
 80004ba:	683b      	ldr	r3, [r7, #0]
 80004bc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80004c0:	d013      	beq.n	80004ea <LL_TIM_OC_EnablePreload+0x52>
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004c8:	d00d      	beq.n	80004e6 <LL_TIM_OC_EnablePreload+0x4e>
 80004ca:	683b      	ldr	r3, [r7, #0]
 80004cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80004d0:	d007      	beq.n	80004e2 <LL_TIM_OC_EnablePreload+0x4a>
 80004d2:	683b      	ldr	r3, [r7, #0]
 80004d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80004d8:	d101      	bne.n	80004de <LL_TIM_OC_EnablePreload+0x46>
 80004da:	2307      	movs	r3, #7
 80004dc:	e00e      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004de:	2308      	movs	r3, #8
 80004e0:	e00c      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004e2:	2306      	movs	r3, #6
 80004e4:	e00a      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004e6:	2305      	movs	r3, #5
 80004e8:	e008      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004ea:	2304      	movs	r3, #4
 80004ec:	e006      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004ee:	2303      	movs	r3, #3
 80004f0:	e004      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004f2:	2302      	movs	r3, #2
 80004f4:	e002      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004f6:	2301      	movs	r3, #1
 80004f8:	e000      	b.n	80004fc <LL_TIM_OC_EnablePreload+0x64>
 80004fa:	2300      	movs	r3, #0
 80004fc:	461d      	mov	r5, r3
  register __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	3318      	adds	r3, #24
 8000502:	461a      	mov	r2, r3
 8000504:	4629      	mov	r1, r5
 8000506:	4b09      	ldr	r3, [pc, #36]	; (800052c <LL_TIM_OC_EnablePreload+0x94>)
 8000508:	5c5b      	ldrb	r3, [r3, r1]
 800050a:	4413      	add	r3, r2
 800050c:	461c      	mov	r4, r3
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800050e:	6822      	ldr	r2, [r4, #0]
 8000510:	4629      	mov	r1, r5
 8000512:	4b07      	ldr	r3, [pc, #28]	; (8000530 <LL_TIM_OC_EnablePreload+0x98>)
 8000514:	5c5b      	ldrb	r3, [r3, r1]
 8000516:	4619      	mov	r1, r3
 8000518:	2308      	movs	r3, #8
 800051a:	408b      	lsls	r3, r1
 800051c:	4313      	orrs	r3, r2
 800051e:	6023      	str	r3, [r4, #0]
}
 8000520:	bf00      	nop
 8000522:	370c      	adds	r7, #12
 8000524:	46bd      	mov	sp, r7
 8000526:	bcb0      	pop	{r4, r5, r7}
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	080024b0 	.word	0x080024b0
 8000530:	080024bc 	.word	0x080024bc

08000534 <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	6078      	str	r0, [r7, #4]
 800053c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800053e:	687b      	ldr	r3, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000544:	bf00      	nop
 8000546:	370c      	adds	r7, #12
 8000548:	46bd      	mov	sp, r7
 800054a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800054e:	4770      	bx	lr

08000550 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000550:	b480      	push	{r7}
 8000552:	b083      	sub	sp, #12
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
 8000558:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	689b      	ldr	r3, [r3, #8]
 800055e:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000562:	f023 0307 	bic.w	r3, r3, #7
 8000566:	683a      	ldr	r2, [r7, #0]
 8000568:	431a      	orrs	r2, r3
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	609a      	str	r2, [r3, #8]
}
 800056e:	bf00      	nop
 8000570:	370c      	adds	r7, #12
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr

0800057a <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800057a:	b480      	push	{r7}
 800057c:	b083      	sub	sp, #12
 800057e:	af00      	add	r7, sp, #0
 8000580:	6078      	str	r0, [r7, #4]
 8000582:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	685b      	ldr	r3, [r3, #4]
 8000588:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800058c:	683b      	ldr	r3, [r7, #0]
 800058e:	431a      	orrs	r2, r3
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	605a      	str	r2, [r3, #4]
}
 8000594:	bf00      	nop
 8000596:	370c      	adds	r7, #12
 8000598:	46bd      	mov	sp, r7
 800059a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059e:	4770      	bx	lr

080005a0 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80005a0:	b480      	push	{r7}
 80005a2:	b083      	sub	sp, #12
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	689b      	ldr	r3, [r3, #8]
 80005ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	609a      	str	r2, [r3, #8]
}
 80005b4:	bf00      	nop
 80005b6:	370c      	adds	r7, #12
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b083      	sub	sp, #12
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	f043 0201 	orr.w	r2, r3, #1
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	60da      	str	r2, [r3, #12]
}
 80005d4:	bf00      	nop
 80005d6:	370c      	adds	r7, #12
 80005d8:	46bd      	mov	sp, r7
 80005da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005de:	4770      	bx	lr

080005e0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80005e0:	b480      	push	{r7}
 80005e2:	b083      	sub	sp, #12
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	6078      	str	r0, [r7, #4]
 80005e8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80005ea:	687b      	ldr	r3, [r7, #4]
 80005ec:	683a      	ldr	r2, [r7, #0]
 80005ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80005f0:	bf00      	nop
 80005f2:	370c      	adds	r7, #12
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr

080005fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000600:	f000 fa86 	bl	8000b10 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000604:	f000 f832 	bl	800066c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000608:	f000 f952 	bl	80008b0 <MX_GPIO_Init>
  MX_TIM2_Init();
 800060c:	f000 f866 	bl	80006dc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000610:	f000 f8da 	bl	80007c8 <MX_TIM3_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  LL_TIM_EnableCounter(TIM2);
 8000614:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000618:	f7ff febe 	bl	8000398 <LL_TIM_EnableCounter>
  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 800061c:	2101      	movs	r1, #1
 800061e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000622:	f7ff fed9 	bl	80003d8 <LL_TIM_CC_EnableChannel>
   LL_TIM_OC_SetCompareCH1(TIM2, poc);
 8000626:	4b07      	ldr	r3, [pc, #28]	; (8000644 <main+0x48>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	4619      	mov	r1, r3
 800062c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000630:	f7ff ff80 	bl	8000534 <LL_TIM_OC_SetCompareCH1>

  LL_TIM_EnableCounter(TIM3);
 8000634:	4804      	ldr	r0, [pc, #16]	; (8000648 <main+0x4c>)
 8000636:	f7ff feaf 	bl	8000398 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM3);
 800063a:	4803      	ldr	r0, [pc, #12]	; (8000648 <main+0x4c>)
 800063c:	f7ff ffc0 	bl	80005c0 <LL_TIM_EnableIT_UPDATE>

  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x44>
 8000642:	bf00      	nop
 8000644:	20000068 	.word	0x20000068
 8000648:	40000400 	.word	0x40000400

0800064c <setDutyCycle>:
    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

void setDutyCycle(uint8_t D){
 800064c:	b580      	push	{r7, lr}
 800064e:	b082      	sub	sp, #8
 8000650:	af00      	add	r7, sp, #0
 8000652:	4603      	mov	r3, r0
 8000654:	71fb      	strb	r3, [r7, #7]

	LL_TIM_OC_SetCompareCH1(TIM2, D);
 8000656:	79fb      	ldrb	r3, [r7, #7]
 8000658:	4619      	mov	r1, r3
 800065a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800065e:	f7ff ff69 	bl	8000534 <LL_TIM_OC_SetCompareCH1>
}
 8000662:	bf00      	nop
 8000664:	3708      	adds	r7, #8
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000670:	2000      	movs	r0, #0
 8000672:	f7ff fe6f 	bl	8000354 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000676:	bf00      	nop
 8000678:	f7ff fe80 	bl	800037c <LL_FLASH_GetLatency>
 800067c:	4603      	mov	r3, r0
 800067e:	2b00      	cmp	r3, #0
 8000680:	d1fa      	bne.n	8000678 <SystemClock_Config+0xc>
  {
  }
  LL_RCC_HSI_Enable();
 8000682:	f7ff fda1 	bl	80001c8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000686:	bf00      	nop
 8000688:	f7ff fdae 	bl	80001e8 <LL_RCC_HSI_IsReady>
 800068c:	4603      	mov	r3, r0
 800068e:	2b01      	cmp	r3, #1
 8000690:	d1fa      	bne.n	8000688 <SystemClock_Config+0x1c>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000692:	2010      	movs	r0, #16
 8000694:	f7ff fdba 	bl	800020c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000698:	2000      	movs	r0, #0
 800069a:	f7ff fdef 	bl	800027c <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 800069e:	2000      	movs	r0, #0
 80006a0:	f7ff fe00 	bl	80002a4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB1_DIV_1);
 80006a4:	2000      	movs	r0, #0
 80006a6:	f7ff fe11 	bl	80002cc <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_HSI);
 80006aa:	2000      	movs	r0, #0
 80006ac:	f7ff fdc4 	bl	8000238 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_HSI)
 80006b0:	bf00      	nop
 80006b2:	f7ff fdd5 	bl	8000260 <LL_RCC_GetSysClkSource>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d1fa      	bne.n	80006b2 <SystemClock_Config+0x46>
  {

  }
  LL_SetSystemCoreClock(8000000);
 80006bc:	4806      	ldr	r0, [pc, #24]	; (80006d8 <SystemClock_Config+0x6c>)
 80006be:	f001 feaf 	bl	8002420 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 80006c2:	2000      	movs	r0, #0
 80006c4:	f000 fa3a 	bl	8000b3c <HAL_InitTick>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d001      	beq.n	80006d2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80006ce:	f000 f91b 	bl	8000908 <Error_Handler>
  }
}
 80006d2:	bf00      	nop
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	bf00      	nop
 80006d8:	007a1200 	.word	0x007a1200

080006dc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b094      	sub	sp, #80	; 0x50
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80006e2:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	605a      	str	r2, [r3, #4]
 80006ec:	609a      	str	r2, [r3, #8]
 80006ee:	60da      	str	r2, [r3, #12]
 80006f0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80006f2:	f107 031c 	add.w	r3, r7, #28
 80006f6:	2220      	movs	r2, #32
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f001 fec4 	bl	8002488 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000700:	1d3b      	adds	r3, r7, #4
 8000702:	2200      	movs	r2, #0
 8000704:	601a      	str	r2, [r3, #0]
 8000706:	605a      	str	r2, [r3, #4]
 8000708:	609a      	str	r2, [r3, #8]
 800070a:	60da      	str	r2, [r3, #12]
 800070c:	611a      	str	r2, [r3, #16]
 800070e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000710:	2001      	movs	r0, #1
 8000712:	f7ff fe07 	bl	8000324 <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 799;
 8000716:	f240 331f 	movw	r3, #799	; 0x31f
 800071a:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800071c:	2300      	movs	r3, #0
 800071e:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 99;
 8000720:	2363      	movs	r3, #99	; 0x63
 8000722:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000724:	2300      	movs	r3, #0
 8000726:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000728:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800072c:	4619      	mov	r1, r3
 800072e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000732:	f001 fb1d 	bl	8001d70 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000736:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800073a:	f7ff fe3d 	bl	80003b8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 800073e:	2100      	movs	r1, #0
 8000740:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000744:	f7ff ff04 	bl	8000550 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 8000748:	2101      	movs	r1, #1
 800074a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800074e:	f7ff fea3 	bl	8000498 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000752:	2360      	movs	r3, #96	; 0x60
 8000754:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000756:	2300      	movs	r3, #0
 8000758:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800075a:	2300      	movs	r3, #0
 800075c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000762:	2300      	movs	r3, #0
 8000764:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000766:	f107 031c 	add.w	r3, r7, #28
 800076a:	461a      	mov	r2, r3
 800076c:	2101      	movs	r1, #1
 800076e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000772:	f001 fb6f 	bl	8001e54 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 8000776:	2101      	movs	r1, #1
 8000778:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800077c:	f7ff fe3e 	bl	80003fc <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000780:	2100      	movs	r1, #0
 8000782:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000786:	f7ff fef8 	bl	800057a <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 800078a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800078e:	f7ff ff07 	bl	80005a0 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */



  /* USER CODE END TIM2_Init 2 */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000792:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000796:	f7ff fdad 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>
  /**TIM2 GPIO Configuration
  PA5   ------> TIM2_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 800079a:	2320      	movs	r3, #32
 800079c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800079e:	2302      	movs	r3, #2
 80007a0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80007a6:	2300      	movs	r3, #0
 80007a8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80007aa:	2300      	movs	r3, #0
 80007ac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 80007ae:	2301      	movs	r3, #1
 80007b0:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	4619      	mov	r1, r3
 80007b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ba:	f001 f9d8 	bl	8001b6e <LL_GPIO_Init>

}
 80007be:	bf00      	nop
 80007c0:	3750      	adds	r7, #80	; 0x50
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}
	...

080007c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	; 0x38
 80007cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007dc:	f107 031c 	add.w	r3, r7, #28
 80007e0:	2200      	movs	r2, #0
 80007e2:	601a      	str	r2, [r3, #0]
 80007e4:	605a      	str	r2, [r3, #4]
 80007e6:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e8:	463b      	mov	r3, r7
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
 80007f4:	611a      	str	r2, [r3, #16]
 80007f6:	615a      	str	r2, [r3, #20]
 80007f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80007fa:	4b2b      	ldr	r3, [pc, #172]	; (80008a8 <MX_TIM3_Init+0xe0>)
 80007fc:	4a2b      	ldr	r2, [pc, #172]	; (80008ac <MX_TIM3_Init+0xe4>)
 80007fe:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 7999;
 8000800:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000802:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000806:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800080a:	2200      	movs	r2, #0
 800080c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000810:	2209      	movs	r2, #9
 8000812:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000816:	2200      	movs	r2, #0
 8000818:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800081a:	4b23      	ldr	r3, [pc, #140]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800081c:	2200      	movs	r2, #0
 800081e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000820:	4821      	ldr	r0, [pc, #132]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000822:	f000 fae0 	bl	8000de6 <HAL_TIM_Base_Init>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d001      	beq.n	8000830 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800082c:	f000 f86c 	bl	8000908 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000830:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000834:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000836:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800083a:	4619      	mov	r1, r3
 800083c:	481a      	ldr	r0, [pc, #104]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800083e:	f000 fbb1 	bl	8000fa4 <HAL_TIM_ConfigClockSource>
 8000842:	4603      	mov	r3, r0
 8000844:	2b00      	cmp	r3, #0
 8000846:	d001      	beq.n	800084c <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000848:	f000 f85e 	bl	8000908 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 800084c:	4816      	ldr	r0, [pc, #88]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800084e:	f000 faf5 	bl	8000e3c <HAL_TIM_OC_Init>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d001      	beq.n	800085c <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000858:	f000 f856 	bl	8000908 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800085c:	2300      	movs	r3, #0
 800085e:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000860:	2300      	movs	r3, #0
 8000862:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000864:	f107 031c 	add.w	r3, r7, #28
 8000868:	4619      	mov	r1, r3
 800086a:	480f      	ldr	r0, [pc, #60]	; (80008a8 <MX_TIM3_Init+0xe0>)
 800086c:	f001 f80c 	bl	8001888 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8000876:	f000 f847 	bl	8000908 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_ACTIVE;
 800087a:	2310      	movs	r3, #16
 800087c:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 800087e:	2300      	movs	r3, #0
 8000880:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000882:	2300      	movs	r3, #0
 8000884:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000886:	2300      	movs	r3, #0
 8000888:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800088a:	463b      	mov	r3, r7
 800088c:	2200      	movs	r2, #0
 800088e:	4619      	mov	r1, r3
 8000890:	4805      	ldr	r0, [pc, #20]	; (80008a8 <MX_TIM3_Init+0xe0>)
 8000892:	f000 fb09 	bl	8000ea8 <HAL_TIM_OC_ConfigChannel>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d001      	beq.n	80008a0 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 800089c:	f000 f834 	bl	8000908 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	20000028 	.word	0x20000028
 80008ac:	40000400 	.word	0x40000400

080008b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b6:	463b      	mov	r3, r7
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
 80008bc:	605a      	str	r2, [r3, #4]
 80008be:	609a      	str	r2, [r3, #8]
 80008c0:	60da      	str	r2, [r3, #12]
 80008c2:	611a      	str	r2, [r3, #16]
 80008c4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 80008c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80008ca:	f7ff fd13 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 80008ce:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008d2:	f7ff fd0f 	bl	80002f4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(Led_GPIO_Port, Led_Pin);
 80008d6:	2108      	movs	r1, #8
 80008d8:	480a      	ldr	r0, [pc, #40]	; (8000904 <MX_GPIO_Init+0x54>)
 80008da:	f7ff fe81 	bl	80005e0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = Led_Pin;
 80008de:	2308      	movs	r3, #8
 80008e0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008e2:	2301      	movs	r3, #1
 80008e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008ee:	2300      	movs	r3, #0
 80008f0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	4803      	ldr	r0, [pc, #12]	; (8000904 <MX_GPIO_Init+0x54>)
 80008f8:	f001 f939 	bl	8001b6e <LL_GPIO_Init>

}
 80008fc:	bf00      	nop
 80008fe:	3718      	adds	r7, #24
 8000900:	46bd      	mov	sp, r7
 8000902:	bd80      	pop	{r7, pc}
 8000904:	48000400 	.word	0x48000400

08000908 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800090c:	bf00      	nop
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr
	...

08000918 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	b083      	sub	sp, #12
 800091c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <HAL_MspInit+0x44>)
 8000920:	699b      	ldr	r3, [r3, #24]
 8000922:	4a0e      	ldr	r2, [pc, #56]	; (800095c <HAL_MspInit+0x44>)
 8000924:	f043 0301 	orr.w	r3, r3, #1
 8000928:	6193      	str	r3, [r2, #24]
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <HAL_MspInit+0x44>)
 800092c:	699b      	ldr	r3, [r3, #24]
 800092e:	f003 0301 	and.w	r3, r3, #1
 8000932:	607b      	str	r3, [r7, #4]
 8000934:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <HAL_MspInit+0x44>)
 8000938:	69db      	ldr	r3, [r3, #28]
 800093a:	4a08      	ldr	r2, [pc, #32]	; (800095c <HAL_MspInit+0x44>)
 800093c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000940:	61d3      	str	r3, [r2, #28]
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <HAL_MspInit+0x44>)
 8000944:	69db      	ldr	r3, [r3, #28]
 8000946:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800094a:	603b      	str	r3, [r7, #0]
 800094c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800094e:	bf00      	nop
 8000950:	370c      	adds	r7, #12
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	40021000 	.word	0x40021000

08000960 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000960:	b580      	push	{r7, lr}
 8000962:	b084      	sub	sp, #16
 8000964:	af00      	add	r7, sp, #0
 8000966:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	681b      	ldr	r3, [r3, #0]
 800096c:	4a0d      	ldr	r2, [pc, #52]	; (80009a4 <HAL_TIM_Base_MspInit+0x44>)
 800096e:	4293      	cmp	r3, r2
 8000970:	d113      	bne.n	800099a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000972:	4b0d      	ldr	r3, [pc, #52]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000974:	69db      	ldr	r3, [r3, #28]
 8000976:	4a0c      	ldr	r2, [pc, #48]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000978:	f043 0302 	orr.w	r3, r3, #2
 800097c:	61d3      	str	r3, [r2, #28]
 800097e:	4b0a      	ldr	r3, [pc, #40]	; (80009a8 <HAL_TIM_Base_MspInit+0x48>)
 8000980:	69db      	ldr	r3, [r3, #28]
 8000982:	f003 0302 	and.w	r3, r3, #2
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800098a:	2200      	movs	r2, #0
 800098c:	2100      	movs	r1, #0
 800098e:	201d      	movs	r0, #29
 8000990:	f000 f9f3 	bl	8000d7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000994:	201d      	movs	r0, #29
 8000996:	f000 fa0c 	bl	8000db2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800099a:	bf00      	nop
 800099c:	3710      	adds	r7, #16
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40000400 	.word	0x40000400
 80009a8:	40021000 	.word	0x40021000

080009ac <LL_TIM_ClearFlag_UPDATE>:
{
 80009ac:	b480      	push	{r7}
 80009ae:	b083      	sub	sp, #12
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	f06f 0201 	mvn.w	r2, #1
 80009ba:	611a      	str	r2, [r3, #16]
}
 80009bc:	bf00      	nop
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr

080009c8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 80009c8:	b480      	push	{r7}
 80009ca:	b083      	sub	sp, #12
 80009cc:	af00      	add	r7, sp, #0
 80009ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	691b      	ldr	r3, [r3, #16]
 80009d4:	f003 0301 	and.w	r3, r3, #1
 80009d8:	2b01      	cmp	r3, #1
 80009da:	d101      	bne.n	80009e0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 80009dc:	2301      	movs	r3, #1
 80009de:	e000      	b.n	80009e2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr

080009ee <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009ee:	b480      	push	{r7}
 80009f0:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80009f2:	bf00      	nop
 80009f4:	46bd      	mov	sp, r7
 80009f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fa:	4770      	bx	lr

080009fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a00:	e7fe      	b.n	8000a00 <HardFault_Handler+0x4>

08000a02 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a02:	b480      	push	{r7}
 8000a04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a06:	e7fe      	b.n	8000a06 <MemManage_Handler+0x4>

08000a08 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0c:	e7fe      	b.n	8000a0c <BusFault_Handler+0x4>

08000a0e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a0e:	b480      	push	{r7}
 8000a10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a12:	e7fe      	b.n	8000a12 <UsageFault_Handler+0x4>

08000a14 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a18:	bf00      	nop
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr

08000a22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a22:	b480      	push	{r7}
 8000a24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a26:	bf00      	nop
 8000a28:	46bd      	mov	sp, r7
 8000a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2e:	4770      	bx	lr

08000a30 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a34:	bf00      	nop
 8000a36:	46bd      	mov	sp, r7
 8000a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3c:	4770      	bx	lr

08000a3e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a42:	f000 f8ab 	bl	8000b9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a46:	bf00      	nop
 8000a48:	bd80      	pop	{r7, pc}
	...

08000a4c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
 	if(LL_TIM_IsActiveFlag_UPDATE(TIM3)){
 8000a50:	480d      	ldr	r0, [pc, #52]	; (8000a88 <TIM3_IRQHandler+0x3c>)
 8000a52:	f7ff ffb9 	bl	80009c8 <LL_TIM_IsActiveFlag_UPDATE>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d010      	beq.n	8000a7e <TIM3_IRQHandler+0x32>

 		if(poc==99)poc=0;
 8000a5c:	4b0b      	ldr	r3, [pc, #44]	; (8000a8c <TIM3_IRQHandler+0x40>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	2b63      	cmp	r3, #99	; 0x63
 8000a62:	d102      	bne.n	8000a6a <TIM3_IRQHandler+0x1e>
 8000a64:	4b09      	ldr	r3, [pc, #36]	; (8000a8c <TIM3_IRQHandler+0x40>)
 8000a66:	2200      	movs	r2, #0
 8000a68:	601a      	str	r2, [r3, #0]
		poc++;
 8000a6a:	4b08      	ldr	r3, [pc, #32]	; (8000a8c <TIM3_IRQHandler+0x40>)
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	3301      	adds	r3, #1
 8000a70:	4a06      	ldr	r2, [pc, #24]	; (8000a8c <TIM3_IRQHandler+0x40>)
 8000a72:	6013      	str	r3, [r2, #0]
		setDutyCycle(poc);
 8000a74:	4b05      	ldr	r3, [pc, #20]	; (8000a8c <TIM3_IRQHandler+0x40>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4618      	mov	r0, r3
 8000a7a:	f7ff fde7 	bl	800064c <setDutyCycle>



 	}
	LL_TIM_ClearFlag_UPDATE(TIM3);
 8000a7e:	4802      	ldr	r0, [pc, #8]	; (8000a88 <TIM3_IRQHandler+0x3c>)
 8000a80:	f7ff ff94 	bl	80009ac <LL_TIM_ClearFlag_UPDATE>

}
 8000a84:	bf00      	nop
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	40000400 	.word	0x40000400
 8000a8c:	20000068 	.word	0x20000068

08000a90 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b08      	ldr	r3, [pc, #32]	; (8000ab8 <SystemInit+0x28>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a07      	ldr	r2, [pc, #28]	; (8000ab8 <SystemInit+0x28>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000aa4:	4b04      	ldr	r3, [pc, #16]	; (8000ab8 <SystemInit+0x28>)
 8000aa6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000aaa:	609a      	str	r2, [r3, #8]
#endif
}
 8000aac:	bf00      	nop
 8000aae:	46bd      	mov	sp, r7
 8000ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop
 8000ab8:	e000ed00 	.word	0xe000ed00

08000abc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000abc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000af4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000ac0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000ac2:	e003      	b.n	8000acc <LoopCopyDataInit>

08000ac4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000ac4:	4b0c      	ldr	r3, [pc, #48]	; (8000af8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000ac6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000ac8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000aca:	3104      	adds	r1, #4

08000acc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000acc:	480b      	ldr	r0, [pc, #44]	; (8000afc <LoopForever+0xa>)
	ldr	r3, =_edata
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000ad0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000ad2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000ad4:	d3f6      	bcc.n	8000ac4 <CopyDataInit>
	ldr	r2, =_sbss
 8000ad6:	4a0b      	ldr	r2, [pc, #44]	; (8000b04 <LoopForever+0x12>)
	b	LoopFillZerobss
 8000ad8:	e002      	b.n	8000ae0 <LoopFillZerobss>

08000ada <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000ada:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000adc:	f842 3b04 	str.w	r3, [r2], #4

08000ae0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <LoopForever+0x16>)
	cmp	r2, r3
 8000ae2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000ae4:	d3f9      	bcc.n	8000ada <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000ae6:	f7ff ffd3 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000aea:	f001 fca9 	bl	8002440 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000aee:	f7ff fd85 	bl	80005fc <main>

08000af2 <LoopForever>:

LoopForever:
    b LoopForever
 8000af2:	e7fe      	b.n	8000af2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000af4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8000af8:	080024d0 	.word	0x080024d0
	ldr	r0, =_sdata
 8000afc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000b00:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8000b04:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8000b08:	20000070 	.word	0x20000070

08000b0c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000b0c:	e7fe      	b.n	8000b0c <ADC1_2_IRQHandler>
	...

08000b10 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b14:	4b08      	ldr	r3, [pc, #32]	; (8000b38 <HAL_Init+0x28>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a07      	ldr	r2, [pc, #28]	; (8000b38 <HAL_Init+0x28>)
 8000b1a:	f043 0310 	orr.w	r3, r3, #16
 8000b1e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b20:	2003      	movs	r0, #3
 8000b22:	f000 f91f 	bl	8000d64 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f808 	bl	8000b3c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b2c:	f7ff fef4 	bl	8000918 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b30:	2300      	movs	r3, #0
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40022000 	.word	0x40022000

08000b3c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b44:	4b12      	ldr	r3, [pc, #72]	; (8000b90 <HAL_InitTick+0x54>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	4b12      	ldr	r3, [pc, #72]	; (8000b94 <HAL_InitTick+0x58>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	4619      	mov	r1, r3
 8000b4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f000 f937 	bl	8000dce <HAL_SYSTICK_Config>
 8000b60:	4603      	mov	r3, r0
 8000b62:	2b00      	cmp	r3, #0
 8000b64:	d001      	beq.n	8000b6a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b66:	2301      	movs	r3, #1
 8000b68:	e00e      	b.n	8000b88 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	2b0f      	cmp	r3, #15
 8000b6e:	d80a      	bhi.n	8000b86 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	f000 f8ff 	bl	8000d7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b7c:	4a06      	ldr	r2, [pc, #24]	; (8000b98 <HAL_InitTick+0x5c>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b82:	2300      	movs	r3, #0
 8000b84:	e000      	b.n	8000b88 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b86:	2301      	movs	r3, #1
}
 8000b88:	4618      	mov	r0, r3
 8000b8a:	3708      	adds	r7, #8
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	20000000 	.word	0x20000000
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000004 	.word	0x20000004

08000b9c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ba0:	4b06      	ldr	r3, [pc, #24]	; (8000bbc <HAL_IncTick+0x20>)
 8000ba2:	781b      	ldrb	r3, [r3, #0]
 8000ba4:	461a      	mov	r2, r3
 8000ba6:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x24>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	4413      	add	r3, r2
 8000bac:	4a04      	ldr	r2, [pc, #16]	; (8000bc0 <HAL_IncTick+0x24>)
 8000bae:	6013      	str	r3, [r2, #0]
}
 8000bb0:	bf00      	nop
 8000bb2:	46bd      	mov	sp, r7
 8000bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb8:	4770      	bx	lr
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	2000006c 	.word	0x2000006c

08000bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	b085      	sub	sp, #20
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd6:	68db      	ldr	r3, [r3, #12]
 8000bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bda:	68ba      	ldr	r2, [r7, #8]
 8000bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000be0:	4013      	ands	r3, r2
 8000be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be8:	68bb      	ldr	r3, [r7, #8]
 8000bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf6:	4a04      	ldr	r2, [pc, #16]	; (8000c08 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf8:	68bb      	ldr	r3, [r7, #8]
 8000bfa:	60d3      	str	r3, [r2, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	e000ed00 	.word	0xe000ed00

08000c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c10:	4b04      	ldr	r3, [pc, #16]	; (8000c24 <__NVIC_GetPriorityGrouping+0x18>)
 8000c12:	68db      	ldr	r3, [r3, #12]
 8000c14:	0a1b      	lsrs	r3, r3, #8
 8000c16:	f003 0307 	and.w	r3, r3, #7
}
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c22:	4770      	bx	lr
 8000c24:	e000ed00 	.word	0xe000ed00

08000c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b083      	sub	sp, #12
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	4603      	mov	r3, r0
 8000c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	db0b      	blt.n	8000c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c3a:	79fb      	ldrb	r3, [r7, #7]
 8000c3c:	f003 021f 	and.w	r2, r3, #31
 8000c40:	4907      	ldr	r1, [pc, #28]	; (8000c60 <__NVIC_EnableIRQ+0x38>)
 8000c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c46:	095b      	lsrs	r3, r3, #5
 8000c48:	2001      	movs	r0, #1
 8000c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8000c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000c52:	bf00      	nop
 8000c54:	370c      	adds	r7, #12
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
 8000c5e:	bf00      	nop
 8000c60:	e000e100 	.word	0xe000e100

08000c64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b083      	sub	sp, #12
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	6039      	str	r1, [r7, #0]
 8000c6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	db0a      	blt.n	8000c8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c78:	683b      	ldr	r3, [r7, #0]
 8000c7a:	b2da      	uxtb	r2, r3
 8000c7c:	490c      	ldr	r1, [pc, #48]	; (8000cb0 <__NVIC_SetPriority+0x4c>)
 8000c7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c82:	0112      	lsls	r2, r2, #4
 8000c84:	b2d2      	uxtb	r2, r2
 8000c86:	440b      	add	r3, r1
 8000c88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c8c:	e00a      	b.n	8000ca4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c8e:	683b      	ldr	r3, [r7, #0]
 8000c90:	b2da      	uxtb	r2, r3
 8000c92:	4908      	ldr	r1, [pc, #32]	; (8000cb4 <__NVIC_SetPriority+0x50>)
 8000c94:	79fb      	ldrb	r3, [r7, #7]
 8000c96:	f003 030f 	and.w	r3, r3, #15
 8000c9a:	3b04      	subs	r3, #4
 8000c9c:	0112      	lsls	r2, r2, #4
 8000c9e:	b2d2      	uxtb	r2, r2
 8000ca0:	440b      	add	r3, r1
 8000ca2:	761a      	strb	r2, [r3, #24]
}
 8000ca4:	bf00      	nop
 8000ca6:	370c      	adds	r7, #12
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cae:	4770      	bx	lr
 8000cb0:	e000e100 	.word	0xe000e100
 8000cb4:	e000ed00 	.word	0xe000ed00

08000cb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b089      	sub	sp, #36	; 0x24
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	f003 0307 	and.w	r3, r3, #7
 8000cca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ccc:	69fb      	ldr	r3, [r7, #28]
 8000cce:	f1c3 0307 	rsb	r3, r3, #7
 8000cd2:	2b04      	cmp	r3, #4
 8000cd4:	bf28      	it	cs
 8000cd6:	2304      	movcs	r3, #4
 8000cd8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	3304      	adds	r3, #4
 8000cde:	2b06      	cmp	r3, #6
 8000ce0:	d902      	bls.n	8000ce8 <NVIC_EncodePriority+0x30>
 8000ce2:	69fb      	ldr	r3, [r7, #28]
 8000ce4:	3b03      	subs	r3, #3
 8000ce6:	e000      	b.n	8000cea <NVIC_EncodePriority+0x32>
 8000ce8:	2300      	movs	r3, #0
 8000cea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cec:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf0:	69bb      	ldr	r3, [r7, #24]
 8000cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf6:	43da      	mvns	r2, r3
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	401a      	ands	r2, r3
 8000cfc:	697b      	ldr	r3, [r7, #20]
 8000cfe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d00:	f04f 31ff 	mov.w	r1, #4294967295
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0a:	43d9      	mvns	r1, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d10:	4313      	orrs	r3, r2
         );
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	3724      	adds	r7, #36	; 0x24
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
	...

08000d20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b082      	sub	sp, #8
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3b01      	subs	r3, #1
 8000d2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d30:	d301      	bcc.n	8000d36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d32:	2301      	movs	r3, #1
 8000d34:	e00f      	b.n	8000d56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d36:	4a0a      	ldr	r2, [pc, #40]	; (8000d60 <SysTick_Config+0x40>)
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	3b01      	subs	r3, #1
 8000d3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d3e:	210f      	movs	r1, #15
 8000d40:	f04f 30ff 	mov.w	r0, #4294967295
 8000d44:	f7ff ff8e 	bl	8000c64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d48:	4b05      	ldr	r3, [pc, #20]	; (8000d60 <SysTick_Config+0x40>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d4e:	4b04      	ldr	r3, [pc, #16]	; (8000d60 <SysTick_Config+0x40>)
 8000d50:	2207      	movs	r2, #7
 8000d52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d54:	2300      	movs	r3, #0
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	e000e010 	.word	0xe000e010

08000d64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b580      	push	{r7, lr}
 8000d66:	b082      	sub	sp, #8
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f7ff ff29 	bl	8000bc4 <__NVIC_SetPriorityGrouping>
}
 8000d72:	bf00      	nop
 8000d74:	3708      	adds	r7, #8
 8000d76:	46bd      	mov	sp, r7
 8000d78:	bd80      	pop	{r7, pc}

08000d7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b086      	sub	sp, #24
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	4603      	mov	r3, r0
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
 8000d86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d8c:	f7ff ff3e 	bl	8000c0c <__NVIC_GetPriorityGrouping>
 8000d90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d92:	687a      	ldr	r2, [r7, #4]
 8000d94:	68b9      	ldr	r1, [r7, #8]
 8000d96:	6978      	ldr	r0, [r7, #20]
 8000d98:	f7ff ff8e 	bl	8000cb8 <NVIC_EncodePriority>
 8000d9c:	4602      	mov	r2, r0
 8000d9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da2:	4611      	mov	r1, r2
 8000da4:	4618      	mov	r0, r3
 8000da6:	f7ff ff5d 	bl	8000c64 <__NVIC_SetPriority>
}
 8000daa:	bf00      	nop
 8000dac:	3718      	adds	r7, #24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}

08000db2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db2:	b580      	push	{r7, lr}
 8000db4:	b082      	sub	sp, #8
 8000db6:	af00      	add	r7, sp, #0
 8000db8:	4603      	mov	r3, r0
 8000dba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc0:	4618      	mov	r0, r3
 8000dc2:	f7ff ff31 	bl	8000c28 <__NVIC_EnableIRQ>
}
 8000dc6:	bf00      	nop
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}

08000dce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ffa2 	bl	8000d20 <SysTick_Config>
 8000ddc:	4603      	mov	r3, r0
}
 8000dde:	4618      	mov	r0, r3
 8000de0:	3708      	adds	r7, #8
 8000de2:	46bd      	mov	sp, r7
 8000de4:	bd80      	pop	{r7, pc}

08000de6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8000de6:	b580      	push	{r7, lr}
 8000de8:	b082      	sub	sp, #8
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d101      	bne.n	8000df8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8000df4:	2301      	movs	r3, #1
 8000df6:	e01d      	b.n	8000e34 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000dfe:	b2db      	uxtb	r3, r3
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d106      	bne.n	8000e12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f7ff fda7 	bl	8000960 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2202      	movs	r2, #2
 8000e16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	3304      	adds	r3, #4
 8000e22:	4619      	mov	r1, r3
 8000e24:	4610      	mov	r0, r2
 8000e26:	f000 f977 	bl	8001118 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	2201      	movs	r2, #1
 8000e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000e32:	2300      	movs	r3, #0
}
 8000e34:	4618      	mov	r0, r3
 8000e36:	3708      	adds	r7, #8
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	b082      	sub	sp, #8
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d101      	bne.n	8000e4e <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	e01d      	b.n	8000e8a <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d106      	bne.n	8000e68 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	f000 f815 	bl	8000e92 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	3304      	adds	r3, #4
 8000e78:	4619      	mov	r1, r3
 8000e7a:	4610      	mov	r0, r2
 8000e7c:	f000 f94c 	bl	8001118 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	2201      	movs	r2, #1
 8000e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	3708      	adds	r7, #8
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8000e92:	b480      	push	{r7}
 8000e94:	b083      	sub	sp, #12
 8000e96:	af00      	add	r7, sp, #0
 8000e98:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8000e9a:	bf00      	nop
 8000e9c:	370c      	adds	r7, #12
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea4:	4770      	bx	lr
	...

08000ea8 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b084      	sub	sp, #16
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8000eb4:	68fb      	ldr	r3, [r7, #12]
 8000eb6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000eba:	2b01      	cmp	r3, #1
 8000ebc:	d101      	bne.n	8000ec2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8000ebe:	2302      	movs	r3, #2
 8000ec0:	e06c      	b.n	8000f9c <HAL_TIM_OC_ConfigChannel+0xf4>
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	2202      	movs	r2, #2
 8000ece:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	2b14      	cmp	r3, #20
 8000ed6:	d857      	bhi.n	8000f88 <HAL_TIM_OC_ConfigChannel+0xe0>
 8000ed8:	a201      	add	r2, pc, #4	; (adr r2, 8000ee0 <HAL_TIM_OC_ConfigChannel+0x38>)
 8000eda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ede:	bf00      	nop
 8000ee0:	08000f35 	.word	0x08000f35
 8000ee4:	08000f89 	.word	0x08000f89
 8000ee8:	08000f89 	.word	0x08000f89
 8000eec:	08000f89 	.word	0x08000f89
 8000ef0:	08000f43 	.word	0x08000f43
 8000ef4:	08000f89 	.word	0x08000f89
 8000ef8:	08000f89 	.word	0x08000f89
 8000efc:	08000f89 	.word	0x08000f89
 8000f00:	08000f51 	.word	0x08000f51
 8000f04:	08000f89 	.word	0x08000f89
 8000f08:	08000f89 	.word	0x08000f89
 8000f0c:	08000f89 	.word	0x08000f89
 8000f10:	08000f5f 	.word	0x08000f5f
 8000f14:	08000f89 	.word	0x08000f89
 8000f18:	08000f89 	.word	0x08000f89
 8000f1c:	08000f89 	.word	0x08000f89
 8000f20:	08000f6d 	.word	0x08000f6d
 8000f24:	08000f89 	.word	0x08000f89
 8000f28:	08000f89 	.word	0x08000f89
 8000f2c:	08000f89 	.word	0x08000f89
 8000f30:	08000f7b 	.word	0x08000f7b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	68b9      	ldr	r1, [r7, #8]
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f000 f964 	bl	8001208 <TIM_OC1_SetConfig>
      break;
 8000f40:	e023      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	68b9      	ldr	r1, [r7, #8]
 8000f48:	4618      	mov	r0, r3
 8000f4a:	f000 f9e3 	bl	8001314 <TIM_OC2_SetConfig>
      break;
 8000f4e:	e01c      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	68b9      	ldr	r1, [r7, #8]
 8000f56:	4618      	mov	r0, r3
 8000f58:	f000 fa5c 	bl	8001414 <TIM_OC3_SetConfig>
      break;
 8000f5c:	e015      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	68b9      	ldr	r1, [r7, #8]
 8000f64:	4618      	mov	r0, r3
 8000f66:	f000 fad3 	bl	8001510 <TIM_OC4_SetConfig>
      break;
 8000f6a:	e00e      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	68b9      	ldr	r1, [r7, #8]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f000 fb30 	bl	80015d8 <TIM_OC5_SetConfig>
      break;
 8000f78:	e007      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8000f7a:	68fb      	ldr	r3, [r7, #12]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	68b9      	ldr	r1, [r7, #8]
 8000f80:	4618      	mov	r0, r3
 8000f82:	f000 fb87 	bl	8001694 <TIM_OC6_SetConfig>
      break;
 8000f86:	e000      	b.n	8000f8a <HAL_TIM_OC_ConfigChannel+0xe2>
    }
#endif /* TIM_CCER_CC6E */

    default:
      break;
 8000f88:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8000f8a:	68fb      	ldr	r3, [r7, #12]
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	2200      	movs	r2, #0
 8000f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8000f9a:	2300      	movs	r3, #0
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3710      	adds	r7, #16
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b084      	sub	sp, #16
 8000fa8:	af00      	add	r7, sp, #0
 8000faa:	6078      	str	r0, [r7, #4]
 8000fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d101      	bne.n	8000fbc <HAL_TIM_ConfigClockSource+0x18>
 8000fb8:	2302      	movs	r3, #2
 8000fba:	e0a8      	b.n	800110e <HAL_TIM_ConfigClockSource+0x16a>
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2202      	movs	r2, #2
 8000fc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	689b      	ldr	r3, [r3, #8]
 8000fd2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000fd4:	68fb      	ldr	r3, [r7, #12]
 8000fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000fda:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8000fde:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8000fe6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	68fa      	ldr	r2, [r7, #12]
 8000fee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8000ff0:	683b      	ldr	r3, [r7, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	2b40      	cmp	r3, #64	; 0x40
 8000ff6:	d067      	beq.n	80010c8 <HAL_TIM_ConfigClockSource+0x124>
 8000ff8:	2b40      	cmp	r3, #64	; 0x40
 8000ffa:	d80b      	bhi.n	8001014 <HAL_TIM_ConfigClockSource+0x70>
 8000ffc:	2b10      	cmp	r3, #16
 8000ffe:	d073      	beq.n	80010e8 <HAL_TIM_ConfigClockSource+0x144>
 8001000:	2b10      	cmp	r3, #16
 8001002:	d802      	bhi.n	800100a <HAL_TIM_ConfigClockSource+0x66>
 8001004:	2b00      	cmp	r3, #0
 8001006:	d06f      	beq.n	80010e8 <HAL_TIM_ConfigClockSource+0x144>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8001008:	e078      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 800100a:	2b20      	cmp	r3, #32
 800100c:	d06c      	beq.n	80010e8 <HAL_TIM_ConfigClockSource+0x144>
 800100e:	2b30      	cmp	r3, #48	; 0x30
 8001010:	d06a      	beq.n	80010e8 <HAL_TIM_ConfigClockSource+0x144>
      break;
 8001012:	e073      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001014:	2b70      	cmp	r3, #112	; 0x70
 8001016:	d00d      	beq.n	8001034 <HAL_TIM_ConfigClockSource+0x90>
 8001018:	2b70      	cmp	r3, #112	; 0x70
 800101a:	d804      	bhi.n	8001026 <HAL_TIM_ConfigClockSource+0x82>
 800101c:	2b50      	cmp	r3, #80	; 0x50
 800101e:	d033      	beq.n	8001088 <HAL_TIM_ConfigClockSource+0xe4>
 8001020:	2b60      	cmp	r3, #96	; 0x60
 8001022:	d041      	beq.n	80010a8 <HAL_TIM_ConfigClockSource+0x104>
      break;
 8001024:	e06a      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
  switch (sClockSourceConfig->ClockSource)
 8001026:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800102a:	d066      	beq.n	80010fa <HAL_TIM_ConfigClockSource+0x156>
 800102c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001030:	d017      	beq.n	8001062 <HAL_TIM_ConfigClockSource+0xbe>
      break;
 8001032:	e063      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6899      	ldr	r1, [r3, #8]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685a      	ldr	r2, [r3, #4]
 8001040:	683b      	ldr	r3, [r7, #0]
 8001042:	68db      	ldr	r3, [r3, #12]
 8001044:	f000 fc00 	bl	8001848 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8001056:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	68fa      	ldr	r2, [r7, #12]
 800105e:	609a      	str	r2, [r3, #8]
      break;
 8001060:	e04c      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ETR_SetConfig(htim->Instance,
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6818      	ldr	r0, [r3, #0]
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	6899      	ldr	r1, [r3, #8]
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	685a      	ldr	r2, [r3, #4]
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	68db      	ldr	r3, [r3, #12]
 8001072:	f000 fbe9 	bl	8001848 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	689a      	ldr	r2, [r3, #8]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001084:	609a      	str	r2, [r3, #8]
      break;
 8001086:	e039      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	6818      	ldr	r0, [r3, #0]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	6859      	ldr	r1, [r3, #4]
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	461a      	mov	r2, r3
 8001096:	f000 fb5d 	bl	8001754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2150      	movs	r1, #80	; 0x50
 80010a0:	4618      	mov	r0, r3
 80010a2:	f000 fbb6 	bl	8001812 <TIM_ITRx_SetConfig>
      break;
 80010a6:	e029      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	6818      	ldr	r0, [r3, #0]
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	6859      	ldr	r1, [r3, #4]
 80010b0:	683b      	ldr	r3, [r7, #0]
 80010b2:	68db      	ldr	r3, [r3, #12]
 80010b4:	461a      	mov	r2, r3
 80010b6:	f000 fb7c 	bl	80017b2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2160      	movs	r1, #96	; 0x60
 80010c0:	4618      	mov	r0, r3
 80010c2:	f000 fba6 	bl	8001812 <TIM_ITRx_SetConfig>
      break;
 80010c6:	e019      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	6818      	ldr	r0, [r3, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	6859      	ldr	r1, [r3, #4]
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	461a      	mov	r2, r3
 80010d6:	f000 fb3d 	bl	8001754 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	4618      	mov	r0, r3
 80010e2:	f000 fb96 	bl	8001812 <TIM_ITRx_SetConfig>
      break;
 80010e6:	e009      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681a      	ldr	r2, [r3, #0]
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	4619      	mov	r1, r3
 80010f2:	4610      	mov	r0, r2
 80010f4:	f000 fb8d 	bl	8001812 <TIM_ITRx_SetConfig>
      break;
 80010f8:	e000      	b.n	80010fc <HAL_TIM_ConfigClockSource+0x158>
      break;
 80010fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	2201      	movs	r2, #1
 8001100:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	2200      	movs	r2, #0
 8001108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800110c:	2300      	movs	r3, #0
}
 800110e:	4618      	mov	r0, r3
 8001110:	3710      	adds	r7, #16
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
	...

08001118 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	4a32      	ldr	r2, [pc, #200]	; (80011f4 <TIM_Base_SetConfig+0xdc>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d007      	beq.n	8001140 <TIM_Base_SetConfig+0x28>
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001136:	d003      	beq.n	8001140 <TIM_Base_SetConfig+0x28>
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4a2f      	ldr	r2, [pc, #188]	; (80011f8 <TIM_Base_SetConfig+0xe0>)
 800113c:	4293      	cmp	r3, r2
 800113e:	d108      	bne.n	8001152 <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001146:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	685b      	ldr	r3, [r3, #4]
 800114c:	68fa      	ldr	r2, [r7, #12]
 800114e:	4313      	orrs	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	4a27      	ldr	r2, [pc, #156]	; (80011f4 <TIM_Base_SetConfig+0xdc>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d013      	beq.n	8001182 <TIM_Base_SetConfig+0x6a>
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001160:	d00f      	beq.n	8001182 <TIM_Base_SetConfig+0x6a>
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <TIM_Base_SetConfig+0xe0>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d00b      	beq.n	8001182 <TIM_Base_SetConfig+0x6a>
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <TIM_Base_SetConfig+0xe4>)
 800116e:	4293      	cmp	r3, r2
 8001170:	d007      	beq.n	8001182 <TIM_Base_SetConfig+0x6a>
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4a22      	ldr	r2, [pc, #136]	; (8001200 <TIM_Base_SetConfig+0xe8>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d003      	beq.n	8001182 <TIM_Base_SetConfig+0x6a>
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	4a21      	ldr	r2, [pc, #132]	; (8001204 <TIM_Base_SetConfig+0xec>)
 800117e:	4293      	cmp	r3, r2
 8001180:	d108      	bne.n	8001194 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001182:	68fb      	ldr	r3, [r7, #12]
 8001184:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001188:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	68db      	ldr	r3, [r3, #12]
 800118e:	68fa      	ldr	r2, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	695b      	ldr	r3, [r3, #20]
 800119e:	4313      	orrs	r3, r2
 80011a0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68fa      	ldr	r2, [r7, #12]
 80011a6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80011a8:	683b      	ldr	r3, [r7, #0]
 80011aa:	689a      	ldr	r2, [r3, #8]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	681a      	ldr	r2, [r3, #0]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	4a0e      	ldr	r2, [pc, #56]	; (80011f4 <TIM_Base_SetConfig+0xdc>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00b      	beq.n	80011d8 <TIM_Base_SetConfig+0xc0>
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <TIM_Base_SetConfig+0xe4>)
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <TIM_Base_SetConfig+0xc0>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a0d      	ldr	r2, [pc, #52]	; (8001200 <TIM_Base_SetConfig+0xe8>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d003      	beq.n	80011d8 <TIM_Base_SetConfig+0xc0>
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	4a0c      	ldr	r2, [pc, #48]	; (8001204 <TIM_Base_SetConfig+0xec>)
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d103      	bne.n	80011e0 <TIM_Base_SetConfig+0xc8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	691a      	ldr	r2, [r3, #16]
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	615a      	str	r2, [r3, #20]
}
 80011e6:	bf00      	nop
 80011e8:	3714      	adds	r7, #20
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr
 80011f2:	bf00      	nop
 80011f4:	40012c00 	.word	0x40012c00
 80011f8:	40000400 	.word	0x40000400
 80011fc:	40014000 	.word	0x40014000
 8001200:	40014400 	.word	0x40014400
 8001204:	40014800 	.word	0x40014800

08001208 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001208:	b480      	push	{r7}
 800120a:	b087      	sub	sp, #28
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	6a1b      	ldr	r3, [r3, #32]
 8001216:	f023 0201 	bic.w	r2, r3, #1
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	6a1b      	ldr	r3, [r3, #32]
 8001222:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	699b      	ldr	r3, [r3, #24]
 800122e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001236:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800123a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	f023 0303 	bic.w	r3, r3, #3
 8001242:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	68fa      	ldr	r2, [r7, #12]
 800124a:	4313      	orrs	r3, r2
 800124c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	f023 0302 	bic.w	r3, r3, #2
 8001254:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	689b      	ldr	r3, [r3, #8]
 800125a:	697a      	ldr	r2, [r7, #20]
 800125c:	4313      	orrs	r3, r2
 800125e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4a28      	ldr	r2, [pc, #160]	; (8001304 <TIM_OC1_SetConfig+0xfc>)
 8001264:	4293      	cmp	r3, r2
 8001266:	d00b      	beq.n	8001280 <TIM_OC1_SetConfig+0x78>
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	4a27      	ldr	r2, [pc, #156]	; (8001308 <TIM_OC1_SetConfig+0x100>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d007      	beq.n	8001280 <TIM_OC1_SetConfig+0x78>
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	4a26      	ldr	r2, [pc, #152]	; (800130c <TIM_OC1_SetConfig+0x104>)
 8001274:	4293      	cmp	r3, r2
 8001276:	d003      	beq.n	8001280 <TIM_OC1_SetConfig+0x78>
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	4a25      	ldr	r2, [pc, #148]	; (8001310 <TIM_OC1_SetConfig+0x108>)
 800127c:	4293      	cmp	r3, r2
 800127e:	d10c      	bne.n	800129a <TIM_OC1_SetConfig+0x92>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	f023 0308 	bic.w	r3, r3, #8
 8001286:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	68db      	ldr	r3, [r3, #12]
 800128c:	697a      	ldr	r2, [r7, #20]
 800128e:	4313      	orrs	r3, r2
 8001290:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	f023 0304 	bic.w	r3, r3, #4
 8001298:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a19      	ldr	r2, [pc, #100]	; (8001304 <TIM_OC1_SetConfig+0xfc>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d00b      	beq.n	80012ba <TIM_OC1_SetConfig+0xb2>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a18      	ldr	r2, [pc, #96]	; (8001308 <TIM_OC1_SetConfig+0x100>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d007      	beq.n	80012ba <TIM_OC1_SetConfig+0xb2>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a17      	ldr	r2, [pc, #92]	; (800130c <TIM_OC1_SetConfig+0x104>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d003      	beq.n	80012ba <TIM_OC1_SetConfig+0xb2>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a16      	ldr	r2, [pc, #88]	; (8001310 <TIM_OC1_SetConfig+0x108>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d111      	bne.n	80012de <TIM_OC1_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80012c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	695b      	ldr	r3, [r3, #20]
 80012ce:	693a      	ldr	r2, [r7, #16]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	699b      	ldr	r3, [r3, #24]
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4313      	orrs	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	693a      	ldr	r2, [r7, #16]
 80012e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	68fa      	ldr	r2, [r7, #12]
 80012e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685a      	ldr	r2, [r3, #4]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	697a      	ldr	r2, [r7, #20]
 80012f6:	621a      	str	r2, [r3, #32]
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	40012c00 	.word	0x40012c00
 8001308:	40014000 	.word	0x40014000
 800130c:	40014400 	.word	0x40014400
 8001310:	40014800 	.word	0x40014800

08001314 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001314:	b480      	push	{r7}
 8001316:	b087      	sub	sp, #28
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	f023 0210 	bic.w	r2, r3, #16
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	699b      	ldr	r3, [r3, #24]
 800133a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800133c:	68fb      	ldr	r3, [r7, #12]
 800133e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001342:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001346:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800134e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001350:	683b      	ldr	r3, [r7, #0]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	021b      	lsls	r3, r3, #8
 8001356:	68fa      	ldr	r2, [r7, #12]
 8001358:	4313      	orrs	r3, r2
 800135a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800135c:	697b      	ldr	r3, [r7, #20]
 800135e:	f023 0320 	bic.w	r3, r3, #32
 8001362:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	689b      	ldr	r3, [r3, #8]
 8001368:	011b      	lsls	r3, r3, #4
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	4a24      	ldr	r2, [pc, #144]	; (8001404 <TIM_OC2_SetConfig+0xf0>)
 8001374:	4293      	cmp	r3, r2
 8001376:	d10d      	bne.n	8001394 <TIM_OC2_SetConfig+0x80>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8001378:	697b      	ldr	r3, [r7, #20]
 800137a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800137e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	68db      	ldr	r3, [r3, #12]
 8001384:	011b      	lsls	r3, r3, #4
 8001386:	697a      	ldr	r2, [r7, #20]
 8001388:	4313      	orrs	r3, r2
 800138a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001392:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	4a1b      	ldr	r2, [pc, #108]	; (8001404 <TIM_OC2_SetConfig+0xf0>)
 8001398:	4293      	cmp	r3, r2
 800139a:	d00b      	beq.n	80013b4 <TIM_OC2_SetConfig+0xa0>
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	4a1a      	ldr	r2, [pc, #104]	; (8001408 <TIM_OC2_SetConfig+0xf4>)
 80013a0:	4293      	cmp	r3, r2
 80013a2:	d007      	beq.n	80013b4 <TIM_OC2_SetConfig+0xa0>
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	4a19      	ldr	r2, [pc, #100]	; (800140c <TIM_OC2_SetConfig+0xf8>)
 80013a8:	4293      	cmp	r3, r2
 80013aa:	d003      	beq.n	80013b4 <TIM_OC2_SetConfig+0xa0>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4a18      	ldr	r2, [pc, #96]	; (8001410 <TIM_OC2_SetConfig+0xfc>)
 80013b0:	4293      	cmp	r3, r2
 80013b2:	d113      	bne.n	80013dc <TIM_OC2_SetConfig+0xc8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80013b4:	693b      	ldr	r3, [r7, #16]
 80013b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80013ba:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80013bc:	693b      	ldr	r3, [r7, #16]
 80013be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80013c2:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	009b      	lsls	r3, r3, #2
 80013ca:	693a      	ldr	r2, [r7, #16]
 80013cc:	4313      	orrs	r3, r2
 80013ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4313      	orrs	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	68fa      	ldr	r2, [r7, #12]
 80013e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	685a      	ldr	r2, [r3, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80013f0:	687b      	ldr	r3, [r7, #4]
 80013f2:	697a      	ldr	r2, [r7, #20]
 80013f4:	621a      	str	r2, [r3, #32]
}
 80013f6:	bf00      	nop
 80013f8:	371c      	adds	r7, #28
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr
 8001402:	bf00      	nop
 8001404:	40012c00 	.word	0x40012c00
 8001408:	40014000 	.word	0x40014000
 800140c:	40014400 	.word	0x40014400
 8001410:	40014800 	.word	0x40014800

08001414 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001414:	b480      	push	{r7}
 8001416:	b087      	sub	sp, #28
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
 800141c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	6a1b      	ldr	r3, [r3, #32]
 800142e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	69db      	ldr	r3, [r3, #28]
 800143a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001442:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001446:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f023 0303 	bic.w	r3, r3, #3
 800144e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	68fa      	ldr	r2, [r7, #12]
 8001456:	4313      	orrs	r3, r2
 8001458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800145a:	697b      	ldr	r3, [r7, #20]
 800145c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8001460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	689b      	ldr	r3, [r3, #8]
 8001466:	021b      	lsls	r3, r3, #8
 8001468:	697a      	ldr	r2, [r7, #20]
 800146a:	4313      	orrs	r3, r2
 800146c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	4a23      	ldr	r2, [pc, #140]	; (8001500 <TIM_OC3_SetConfig+0xec>)
 8001472:	4293      	cmp	r3, r2
 8001474:	d10d      	bne.n	8001492 <TIM_OC3_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800147c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	68db      	ldr	r3, [r3, #12]
 8001482:	021b      	lsls	r3, r3, #8
 8001484:	697a      	ldr	r2, [r7, #20]
 8001486:	4313      	orrs	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8001490:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	4a1a      	ldr	r2, [pc, #104]	; (8001500 <TIM_OC3_SetConfig+0xec>)
 8001496:	4293      	cmp	r3, r2
 8001498:	d00b      	beq.n	80014b2 <TIM_OC3_SetConfig+0x9e>
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	4a19      	ldr	r2, [pc, #100]	; (8001504 <TIM_OC3_SetConfig+0xf0>)
 800149e:	4293      	cmp	r3, r2
 80014a0:	d007      	beq.n	80014b2 <TIM_OC3_SetConfig+0x9e>
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	4a18      	ldr	r2, [pc, #96]	; (8001508 <TIM_OC3_SetConfig+0xf4>)
 80014a6:	4293      	cmp	r3, r2
 80014a8:	d003      	beq.n	80014b2 <TIM_OC3_SetConfig+0x9e>
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	4a17      	ldr	r2, [pc, #92]	; (800150c <TIM_OC3_SetConfig+0xf8>)
 80014ae:	4293      	cmp	r3, r2
 80014b0:	d113      	bne.n	80014da <TIM_OC3_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014b8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80014c0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80014c2:	683b      	ldr	r3, [r7, #0]
 80014c4:	695b      	ldr	r3, [r3, #20]
 80014c6:	011b      	lsls	r3, r3, #4
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4313      	orrs	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	699b      	ldr	r3, [r3, #24]
 80014d2:	011b      	lsls	r3, r3, #4
 80014d4:	693a      	ldr	r2, [r7, #16]
 80014d6:	4313      	orrs	r3, r2
 80014d8:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	693a      	ldr	r2, [r7, #16]
 80014de:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	68fa      	ldr	r2, [r7, #12]
 80014e4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	697a      	ldr	r2, [r7, #20]
 80014f2:	621a      	str	r2, [r3, #32]
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fe:	4770      	bx	lr
 8001500:	40012c00 	.word	0x40012c00
 8001504:	40014000 	.word	0x40014000
 8001508:	40014400 	.word	0x40014400
 800150c:	40014800 	.word	0x40014800

08001510 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8001510:	b480      	push	{r7}
 8001512:	b087      	sub	sp, #28
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
 8001518:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	6a1b      	ldr	r3, [r3, #32]
 800151e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6a1b      	ldr	r3, [r3, #32]
 800152a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	69db      	ldr	r3, [r3, #28]
 8001536:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8001538:	68fb      	ldr	r3, [r7, #12]
 800153a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800153e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8001542:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800154a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800154c:	683b      	ldr	r3, [r7, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	021b      	lsls	r3, r3, #8
 8001552:	68fa      	ldr	r2, [r7, #12]
 8001554:	4313      	orrs	r3, r2
 8001556:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800155e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8001560:	683b      	ldr	r3, [r7, #0]
 8001562:	689b      	ldr	r3, [r3, #8]
 8001564:	031b      	lsls	r3, r3, #12
 8001566:	693a      	ldr	r2, [r7, #16]
 8001568:	4313      	orrs	r3, r2
 800156a:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	4a16      	ldr	r2, [pc, #88]	; (80015c8 <TIM_OC4_SetConfig+0xb8>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d00b      	beq.n	800158c <TIM_OC4_SetConfig+0x7c>
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	4a15      	ldr	r2, [pc, #84]	; (80015cc <TIM_OC4_SetConfig+0xbc>)
 8001578:	4293      	cmp	r3, r2
 800157a:	d007      	beq.n	800158c <TIM_OC4_SetConfig+0x7c>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4a14      	ldr	r2, [pc, #80]	; (80015d0 <TIM_OC4_SetConfig+0xc0>)
 8001580:	4293      	cmp	r3, r2
 8001582:	d003      	beq.n	800158c <TIM_OC4_SetConfig+0x7c>
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	4a13      	ldr	r2, [pc, #76]	; (80015d4 <TIM_OC4_SetConfig+0xc4>)
 8001588:	4293      	cmp	r3, r2
 800158a:	d109      	bne.n	80015a0 <TIM_OC4_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001592:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	695b      	ldr	r3, [r3, #20]
 8001598:	019b      	lsls	r3, r3, #6
 800159a:	697a      	ldr	r2, [r7, #20]
 800159c:	4313      	orrs	r3, r2
 800159e:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	697a      	ldr	r2, [r7, #20]
 80015a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	68fa      	ldr	r2, [r7, #12]
 80015aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	685a      	ldr	r2, [r3, #4]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	621a      	str	r2, [r3, #32]
}
 80015ba:	bf00      	nop
 80015bc:	371c      	adds	r7, #28
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40012c00 	.word	0x40012c00
 80015cc:	40014000 	.word	0x40014000
 80015d0:	40014400 	.word	0x40014400
 80015d4:	40014800 	.word	0x40014800

080015d8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80015d8:	b480      	push	{r7}
 80015da:	b087      	sub	sp, #28
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
 80015e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	6a1b      	ldr	r3, [r3, #32]
 80015e6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	6a1b      	ldr	r3, [r3, #32]
 80015f2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80015fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001606:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800160a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	68fa      	ldr	r2, [r7, #12]
 8001612:	4313      	orrs	r3, r2
 8001614:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800161c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	689b      	ldr	r3, [r3, #8]
 8001622:	041b      	lsls	r3, r3, #16
 8001624:	693a      	ldr	r2, [r7, #16]
 8001626:	4313      	orrs	r3, r2
 8001628:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a15      	ldr	r2, [pc, #84]	; (8001684 <TIM_OC5_SetConfig+0xac>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00b      	beq.n	800164a <TIM_OC5_SetConfig+0x72>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a14      	ldr	r2, [pc, #80]	; (8001688 <TIM_OC5_SetConfig+0xb0>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <TIM_OC5_SetConfig+0x72>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a13      	ldr	r2, [pc, #76]	; (800168c <TIM_OC5_SetConfig+0xb4>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d003      	beq.n	800164a <TIM_OC5_SetConfig+0x72>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4a12      	ldr	r2, [pc, #72]	; (8001690 <TIM_OC5_SetConfig+0xb8>)
 8001646:	4293      	cmp	r3, r2
 8001648:	d109      	bne.n	800165e <TIM_OC5_SetConfig+0x86>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001650:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	695b      	ldr	r3, [r3, #20]
 8001656:	021b      	lsls	r3, r3, #8
 8001658:	697a      	ldr	r2, [r7, #20]
 800165a:	4313      	orrs	r3, r2
 800165c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68fa      	ldr	r2, [r7, #12]
 8001668:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	685a      	ldr	r2, [r3, #4]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	621a      	str	r2, [r3, #32]
}
 8001678:	bf00      	nop
 800167a:	371c      	adds	r7, #28
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	40012c00 	.word	0x40012c00
 8001688:	40014000 	.word	0x40014000
 800168c:	40014400 	.word	0x40014400
 8001690:	40014800 	.word	0x40014800

08001694 <TIM_OC6_SetConfig>:
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8001694:	b480      	push	{r7}
 8001696:	b087      	sub	sp, #28
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
 800169c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a1b      	ldr	r3, [r3, #32]
 80016ae:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80016ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80016c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	4313      	orrs	r3, r2
 80016d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80016d4:	693b      	ldr	r3, [r7, #16]
 80016d6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80016da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	051b      	lsls	r3, r3, #20
 80016e2:	693a      	ldr	r2, [r7, #16]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	4a16      	ldr	r2, [pc, #88]	; (8001744 <TIM_OC6_SetConfig+0xb0>)
 80016ec:	4293      	cmp	r3, r2
 80016ee:	d00b      	beq.n	8001708 <TIM_OC6_SetConfig+0x74>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	4a15      	ldr	r2, [pc, #84]	; (8001748 <TIM_OC6_SetConfig+0xb4>)
 80016f4:	4293      	cmp	r3, r2
 80016f6:	d007      	beq.n	8001708 <TIM_OC6_SetConfig+0x74>
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a14      	ldr	r2, [pc, #80]	; (800174c <TIM_OC6_SetConfig+0xb8>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d003      	beq.n	8001708 <TIM_OC6_SetConfig+0x74>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a13      	ldr	r2, [pc, #76]	; (8001750 <TIM_OC6_SetConfig+0xbc>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d109      	bne.n	800171c <TIM_OC6_SetConfig+0x88>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800170e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	695b      	ldr	r3, [r3, #20]
 8001714:	029b      	lsls	r3, r3, #10
 8001716:	697a      	ldr	r2, [r7, #20]
 8001718:	4313      	orrs	r3, r2
 800171a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	697a      	ldr	r2, [r7, #20]
 8001720:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	685a      	ldr	r2, [r3, #4]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	693a      	ldr	r2, [r7, #16]
 8001734:	621a      	str	r2, [r3, #32]
}
 8001736:	bf00      	nop
 8001738:	371c      	adds	r7, #28
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40012c00 	.word	0x40012c00
 8001748:	40014000 	.word	0x40014000
 800174c:	40014400 	.word	0x40014400
 8001750:	40014800 	.word	0x40014800

08001754 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001754:	b480      	push	{r7}
 8001756:	b087      	sub	sp, #28
 8001758:	af00      	add	r7, sp, #0
 800175a:	60f8      	str	r0, [r7, #12]
 800175c:	60b9      	str	r1, [r7, #8]
 800175e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	f023 0201 	bic.w	r2, r3, #1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	699b      	ldr	r3, [r3, #24]
 8001776:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800177e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	011b      	lsls	r3, r3, #4
 8001784:	693a      	ldr	r2, [r7, #16]
 8001786:	4313      	orrs	r3, r2
 8001788:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	f023 030a 	bic.w	r3, r3, #10
 8001790:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	68bb      	ldr	r3, [r7, #8]
 8001796:	4313      	orrs	r3, r2
 8001798:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	693a      	ldr	r2, [r7, #16]
 800179e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	697a      	ldr	r2, [r7, #20]
 80017a4:	621a      	str	r2, [r3, #32]
}
 80017a6:	bf00      	nop
 80017a8:	371c      	adds	r7, #28
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b087      	sub	sp, #28
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	60f8      	str	r0, [r7, #12]
 80017ba:	60b9      	str	r1, [r7, #8]
 80017bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	6a1b      	ldr	r3, [r3, #32]
 80017c2:	f023 0210 	bic.w	r2, r3, #16
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80017dc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	031b      	lsls	r3, r3, #12
 80017e2:	697a      	ldr	r2, [r7, #20]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80017e8:	693b      	ldr	r3, [r7, #16]
 80017ea:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80017ee:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80017f0:	68bb      	ldr	r3, [r7, #8]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	4313      	orrs	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	697a      	ldr	r2, [r7, #20]
 80017fe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	693a      	ldr	r2, [r7, #16]
 8001804:	621a      	str	r2, [r3, #32]
}
 8001806:	bf00      	nop
 8001808:	371c      	adds	r7, #28
 800180a:	46bd      	mov	sp, r7
 800180c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001810:	4770      	bx	lr

08001812 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001812:	b480      	push	{r7}
 8001814:	b085      	sub	sp, #20
 8001816:	af00      	add	r7, sp, #0
 8001818:	6078      	str	r0, [r7, #4]
 800181a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001828:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800182a:	683a      	ldr	r2, [r7, #0]
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	4313      	orrs	r3, r2
 8001830:	f043 0307 	orr.w	r3, r3, #7
 8001834:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	68fa      	ldr	r2, [r7, #12]
 800183a:	609a      	str	r2, [r3, #8]
}
 800183c:	bf00      	nop
 800183e:	3714      	adds	r7, #20
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001848:	b480      	push	{r7}
 800184a:	b087      	sub	sp, #28
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	607a      	str	r2, [r7, #4]
 8001854:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	689b      	ldr	r3, [r3, #8]
 800185a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001862:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	021a      	lsls	r2, r3, #8
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	431a      	orrs	r2, r3
 800186c:	68bb      	ldr	r3, [r7, #8]
 800186e:	4313      	orrs	r3, r2
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	4313      	orrs	r3, r2
 8001874:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	697a      	ldr	r2, [r7, #20]
 800187a:	609a      	str	r2, [r3, #8]
}
 800187c:	bf00      	nop
 800187e:	371c      	adds	r7, #28
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001888:	b480      	push	{r7}
 800188a:	b085      	sub	sp, #20
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
 8001890:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001898:	2b01      	cmp	r3, #1
 800189a:	d101      	bne.n	80018a0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800189c:	2302      	movs	r3, #2
 800189e:	e054      	b.n	800194a <HAL_TIMEx_MasterConfigSynchronization+0xc2>
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	2201      	movs	r2, #1
 80018a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	2202      	movs	r2, #2
 80018ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	685b      	ldr	r3, [r3, #4]
 80018b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	4a24      	ldr	r2, [pc, #144]	; (8001958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80018c6:	4293      	cmp	r3, r2
 80018c8:	d108      	bne.n	80018dc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80018d0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80018d2:	683b      	ldr	r3, [r7, #0]
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	68fa      	ldr	r2, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80018e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	68fa      	ldr	r2, [r7, #12]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68fa      	ldr	r2, [r7, #12]
 80018f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	4a17      	ldr	r2, [pc, #92]	; (8001958 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80018fc:	4293      	cmp	r3, r2
 80018fe:	d00e      	beq.n	800191e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001908:	d009      	beq.n	800191e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	4a13      	ldr	r2, [pc, #76]	; (800195c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d004      	beq.n	800191e <HAL_TIMEx_MasterConfigSynchronization+0x96>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4a11      	ldr	r2, [pc, #68]	; (8001960 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800191a:	4293      	cmp	r3, r2
 800191c:	d10c      	bne.n	8001938 <HAL_TIMEx_MasterConfigSynchronization+0xb0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800191e:	68bb      	ldr	r3, [r7, #8]
 8001920:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001924:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001926:	683b      	ldr	r3, [r7, #0]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	4313      	orrs	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	2201      	movs	r2, #1
 800193c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	2200      	movs	r2, #0
 8001944:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	3714      	adds	r7, #20
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	40012c00 	.word	0x40012c00
 800195c:	40000400 	.word	0x40000400
 8001960:	40014000 	.word	0x40014000

08001964 <LL_GPIO_SetPinMode>:
{
 8001964:	b480      	push	{r7}
 8001966:	b089      	sub	sp, #36	; 0x24
 8001968:	af00      	add	r7, sp, #0
 800196a:	60f8      	str	r0, [r7, #12]
 800196c:	60b9      	str	r1, [r7, #8]
 800196e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	681a      	ldr	r2, [r3, #0]
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	fa93 f3a3 	rbit	r3, r3
 800197e:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	fab3 f383 	clz	r3, r3
 8001986:	b2db      	uxtb	r3, r3
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2103      	movs	r1, #3
 800198c:	fa01 f303 	lsl.w	r3, r1, r3
 8001990:	43db      	mvns	r3, r3
 8001992:	401a      	ands	r2, r3
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001998:	69fb      	ldr	r3, [r7, #28]
 800199a:	fa93 f3a3 	rbit	r3, r3
 800199e:	61bb      	str	r3, [r7, #24]
  return result;
 80019a0:	69bb      	ldr	r3, [r7, #24]
 80019a2:	fab3 f383 	clz	r3, r3
 80019a6:	b2db      	uxtb	r3, r3
 80019a8:	005b      	lsls	r3, r3, #1
 80019aa:	6879      	ldr	r1, [r7, #4]
 80019ac:	fa01 f303 	lsl.w	r3, r1, r3
 80019b0:	431a      	orrs	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	601a      	str	r2, [r3, #0]
}
 80019b6:	bf00      	nop
 80019b8:	3724      	adds	r7, #36	; 0x24
 80019ba:	46bd      	mov	sp, r7
 80019bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c0:	4770      	bx	lr

080019c2 <LL_GPIO_SetPinOutputType>:
{
 80019c2:	b480      	push	{r7}
 80019c4:	b085      	sub	sp, #20
 80019c6:	af00      	add	r7, sp, #0
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	685a      	ldr	r2, [r3, #4]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	43db      	mvns	r3, r3
 80019d6:	401a      	ands	r2, r3
 80019d8:	68bb      	ldr	r3, [r7, #8]
 80019da:	6879      	ldr	r1, [r7, #4]
 80019dc:	fb01 f303 	mul.w	r3, r1, r3
 80019e0:	431a      	orrs	r2, r3
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	605a      	str	r2, [r3, #4]
}
 80019e6:	bf00      	nop
 80019e8:	3714      	adds	r7, #20
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <LL_GPIO_SetPinSpeed>:
{
 80019f2:	b480      	push	{r7}
 80019f4:	b089      	sub	sp, #36	; 0x24
 80019f6:	af00      	add	r7, sp, #0
 80019f8:	60f8      	str	r0, [r7, #12]
 80019fa:	60b9      	str	r1, [r7, #8]
 80019fc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	689a      	ldr	r2, [r3, #8]
 8001a02:	68bb      	ldr	r3, [r7, #8]
 8001a04:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	fa93 f3a3 	rbit	r3, r3
 8001a0c:	613b      	str	r3, [r7, #16]
  return result;
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	fab3 f383 	clz	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
 8001a16:	005b      	lsls	r3, r3, #1
 8001a18:	2103      	movs	r1, #3
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43db      	mvns	r3, r3
 8001a20:	401a      	ands	r2, r3
 8001a22:	68bb      	ldr	r3, [r7, #8]
 8001a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a26:	69fb      	ldr	r3, [r7, #28]
 8001a28:	fa93 f3a3 	rbit	r3, r3
 8001a2c:	61bb      	str	r3, [r7, #24]
  return result;
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	fab3 f383 	clz	r3, r3
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	6879      	ldr	r1, [r7, #4]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	431a      	orrs	r2, r3
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	609a      	str	r2, [r3, #8]
}
 8001a44:	bf00      	nop
 8001a46:	3724      	adds	r7, #36	; 0x24
 8001a48:	46bd      	mov	sp, r7
 8001a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4e:	4770      	bx	lr

08001a50 <LL_GPIO_SetPinPull>:
{
 8001a50:	b480      	push	{r7}
 8001a52:	b089      	sub	sp, #36	; 0x24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	60b9      	str	r1, [r7, #8]
 8001a5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	68da      	ldr	r2, [r3, #12]
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa93 f3a3 	rbit	r3, r3
 8001a6a:	613b      	str	r3, [r7, #16]
  return result;
 8001a6c:	693b      	ldr	r3, [r7, #16]
 8001a6e:	fab3 f383 	clz	r3, r3
 8001a72:	b2db      	uxtb	r3, r3
 8001a74:	005b      	lsls	r3, r3, #1
 8001a76:	2103      	movs	r1, #3
 8001a78:	fa01 f303 	lsl.w	r3, r1, r3
 8001a7c:	43db      	mvns	r3, r3
 8001a7e:	401a      	ands	r2, r3
 8001a80:	68bb      	ldr	r3, [r7, #8]
 8001a82:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a84:	69fb      	ldr	r3, [r7, #28]
 8001a86:	fa93 f3a3 	rbit	r3, r3
 8001a8a:	61bb      	str	r3, [r7, #24]
  return result;
 8001a8c:	69bb      	ldr	r3, [r7, #24]
 8001a8e:	fab3 f383 	clz	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	6879      	ldr	r1, [r7, #4]
 8001a98:	fa01 f303 	lsl.w	r3, r1, r3
 8001a9c:	431a      	orrs	r2, r3
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	60da      	str	r2, [r3, #12]
}
 8001aa2:	bf00      	nop
 8001aa4:	3724      	adds	r7, #36	; 0x24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr

08001aae <LL_GPIO_SetAFPin_0_7>:
{
 8001aae:	b480      	push	{r7}
 8001ab0:	b089      	sub	sp, #36	; 0x24
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFRL0 << (POSITION_VAL(Pin) * 4U)),
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	6a1a      	ldr	r2, [r3, #32]
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	fa93 f3a3 	rbit	r3, r3
 8001ac8:	613b      	str	r3, [r7, #16]
  return result;
 8001aca:	693b      	ldr	r3, [r7, #16]
 8001acc:	fab3 f383 	clz	r3, r3
 8001ad0:	b2db      	uxtb	r3, r3
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	210f      	movs	r1, #15
 8001ad6:	fa01 f303 	lsl.w	r3, r1, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	401a      	ands	r2, r3
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ae2:	69fb      	ldr	r3, [r7, #28]
 8001ae4:	fa93 f3a3 	rbit	r3, r3
 8001ae8:	61bb      	str	r3, [r7, #24]
  return result;
 8001aea:	69bb      	ldr	r3, [r7, #24]
 8001aec:	fab3 f383 	clz	r3, r3
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	009b      	lsls	r3, r3, #2
 8001af4:	6879      	ldr	r1, [r7, #4]
 8001af6:	fa01 f303 	lsl.w	r3, r1, r3
 8001afa:	431a      	orrs	r2, r3
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	621a      	str	r2, [r3, #32]
}
 8001b00:	bf00      	nop
 8001b02:	3724      	adds	r7, #36	; 0x24
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr

08001b0c <LL_GPIO_SetAFPin_8_15>:
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b089      	sub	sp, #36	; 0x24
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	60f8      	str	r0, [r7, #12]
 8001b14:	60b9      	str	r1, [r7, #8]
 8001b16:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFRH0 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	0a1b      	lsrs	r3, r3, #8
 8001b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	613b      	str	r3, [r7, #16]
  return result;
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	fab3 f383 	clz	r3, r3
 8001b30:	b2db      	uxtb	r3, r3
 8001b32:	009b      	lsls	r3, r3, #2
 8001b34:	210f      	movs	r1, #15
 8001b36:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3a:	43db      	mvns	r3, r3
 8001b3c:	401a      	ands	r2, r3
 8001b3e:	68bb      	ldr	r3, [r7, #8]
 8001b40:	0a1b      	lsrs	r3, r3, #8
 8001b42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b44:	69fb      	ldr	r3, [r7, #28]
 8001b46:	fa93 f3a3 	rbit	r3, r3
 8001b4a:	61bb      	str	r3, [r7, #24]
  return result;
 8001b4c:	69bb      	ldr	r3, [r7, #24]
 8001b4e:	fab3 f383 	clz	r3, r3
 8001b52:	b2db      	uxtb	r3, r3
 8001b54:	009b      	lsls	r3, r3, #2
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	fa01 f303 	lsl.w	r3, r1, r3
 8001b5c:	431a      	orrs	r2, r3
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b62:	bf00      	nop
 8001b64:	3724      	adds	r7, #36	; 0x24
 8001b66:	46bd      	mov	sp, r7
 8001b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6c:	4770      	bx	lr

08001b6e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b6e:	b580      	push	{r7, lr}
 8001b70:	b088      	sub	sp, #32
 8001b72:	af00      	add	r7, sp, #0
 8001b74:	6078      	str	r0, [r7, #4]
 8001b76:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	fa93 f3a3 	rbit	r3, r3
 8001b84:	613b      	str	r3, [r7, #16]
  return result;
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	fab3 f383 	clz	r3, r3
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b90:	e051      	b.n	8001c36 <LL_GPIO_Init+0xc8>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	2101      	movs	r1, #1
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9e:	4013      	ands	r3, r2
 8001ba0:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d043      	beq.n	8001c30 <LL_GPIO_Init+0xc2>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d003      	beq.n	8001bb8 <LL_GPIO_Init+0x4a>
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	2b02      	cmp	r3, #2
 8001bb6:	d10e      	bne.n	8001bd6 <LL_GPIO_Init+0x68>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	69b9      	ldr	r1, [r7, #24]
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7ff ff16 	bl	80019f2 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	6819      	ldr	r1, [r3, #0]
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	6878      	ldr	r0, [r7, #4]
 8001bd2:	f7ff fef6 	bl	80019c2 <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	461a      	mov	r2, r3
 8001bdc:	69b9      	ldr	r1, [r7, #24]
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f7ff ff36 	bl	8001a50 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	2b02      	cmp	r3, #2
 8001bea:	d11a      	bne.n	8001c22 <LL_GPIO_Init+0xb4>
 8001bec:	69bb      	ldr	r3, [r7, #24]
 8001bee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	fa93 f3a3 	rbit	r3, r3
 8001bf6:	60bb      	str	r3, [r7, #8]
  return result;
 8001bf8:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8001bfa:	fab3 f383 	clz	r3, r3
 8001bfe:	b2db      	uxtb	r3, r3
 8001c00:	2b07      	cmp	r3, #7
 8001c02:	d807      	bhi.n	8001c14 <LL_GPIO_Init+0xa6>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	69b9      	ldr	r1, [r7, #24]
 8001c0c:	6878      	ldr	r0, [r7, #4]
 8001c0e:	f7ff ff4e 	bl	8001aae <LL_GPIO_SetAFPin_0_7>
 8001c12:	e006      	b.n	8001c22 <LL_GPIO_Init+0xb4>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	695b      	ldr	r3, [r3, #20]
 8001c18:	461a      	mov	r2, r3
 8001c1a:	69b9      	ldr	r1, [r7, #24]
 8001c1c:	6878      	ldr	r0, [r7, #4]
 8001c1e:	f7ff ff75 	bl	8001b0c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	685b      	ldr	r3, [r3, #4]
 8001c26:	461a      	mov	r2, r3
 8001c28:	69b9      	ldr	r1, [r7, #24]
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	f7ff fe9a 	bl	8001964 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001c30:	69fb      	ldr	r3, [r7, #28]
 8001c32:	3301      	adds	r3, #1
 8001c34:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681a      	ldr	r2, [r3, #0]
 8001c3a:	69fb      	ldr	r3, [r7, #28]
 8001c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d1a6      	bne.n	8001b92 <LL_GPIO_Init+0x24>
  }

  return (SUCCESS);
 8001c44:	2300      	movs	r3, #0
}
 8001c46:	4618      	mov	r0, r3
 8001c48:	3720      	adds	r7, #32
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bd80      	pop	{r7, pc}

08001c4e <LL_TIM_SetPrescaler>:
{
 8001c4e:	b480      	push	{r7}
 8001c50:	b083      	sub	sp, #12
 8001c52:	af00      	add	r7, sp, #0
 8001c54:	6078      	str	r0, [r7, #4]
 8001c56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c68:	4770      	bx	lr

08001c6a <LL_TIM_SetAutoReload>:
{
 8001c6a:	b480      	push	{r7}
 8001c6c:	b083      	sub	sp, #12
 8001c6e:	af00      	add	r7, sp, #0
 8001c70:	6078      	str	r0, [r7, #4]
 8001c72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	683a      	ldr	r2, [r7, #0]
 8001c78:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001c7a:	bf00      	nop
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <LL_TIM_SetRepetitionCounter>:
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_TIM_OC_SetCompareCH1>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	683a      	ldr	r2, [r7, #0]
 8001cb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr

08001cbe <LL_TIM_OC_SetCompareCH2>:
{
 8001cbe:	b480      	push	{r7}
 8001cc0:	b083      	sub	sp, #12
 8001cc2:	af00      	add	r7, sp, #0
 8001cc4:	6078      	str	r0, [r7, #4]
 8001cc6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	683a      	ldr	r2, [r7, #0]
 8001ccc:	639a      	str	r2, [r3, #56]	; 0x38
}
 8001cce:	bf00      	nop
 8001cd0:	370c      	adds	r7, #12
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr

08001cda <LL_TIM_OC_SetCompareCH3>:
{
 8001cda:	b480      	push	{r7}
 8001cdc:	b083      	sub	sp, #12
 8001cde:	af00      	add	r7, sp, #0
 8001ce0:	6078      	str	r0, [r7, #4]
 8001ce2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	683a      	ldr	r2, [r7, #0]
 8001ce8:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <LL_TIM_OC_SetCompareCH4>:
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	b083      	sub	sp, #12
 8001cfa:	af00      	add	r7, sp, #0
 8001cfc:	6078      	str	r0, [r7, #4]
 8001cfe:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	683a      	ldr	r2, [r7, #0]
 8001d04:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001d06:	bf00      	nop
 8001d08:	370c      	adds	r7, #12
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d10:	4770      	bx	lr

08001d12 <LL_TIM_OC_SetCompareCH5>:
{
 8001d12:	b480      	push	{r7}
 8001d14:	b083      	sub	sp, #12
 8001d16:	af00      	add	r7, sp, #0
 8001d18:	6078      	str	r0, [r7, #4]
 8001d1a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	683a      	ldr	r2, [r7, #0]
 8001d24:	659a      	str	r2, [r3, #88]	; 0x58
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <LL_TIM_OC_SetCompareCH6>:
{
 8001d32:	b480      	push	{r7}
 8001d34:	b083      	sub	sp, #12
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	683a      	ldr	r2, [r7, #0]
 8001d40:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr

08001d4e <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001d4e:	b480      	push	{r7}
 8001d50:	b083      	sub	sp, #12
 8001d52:	af00      	add	r7, sp, #0
 8001d54:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	695b      	ldr	r3, [r3, #20]
 8001d5a:	f043 0201 	orr.w	r2, r3, #1
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	615a      	str	r2, [r3, #20]
}
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
 8001d78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	4a2f      	ldr	r2, [pc, #188]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001d84:	4293      	cmp	r3, r2
 8001d86:	d007      	beq.n	8001d98 <LL_TIM_Init+0x28>
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8e:	d003      	beq.n	8001d98 <LL_TIM_Init+0x28>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a2c      	ldr	r2, [pc, #176]	; (8001e44 <LL_TIM_Init+0xd4>)
 8001d94:	4293      	cmp	r3, r2
 8001d96:	d106      	bne.n	8001da6 <LL_TIM_Init+0x36>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a25      	ldr	r2, [pc, #148]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001db4:	d00f      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a22      	ldr	r2, [pc, #136]	; (8001e44 <LL_TIM_Init+0xd4>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d00b      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a21      	ldr	r2, [pc, #132]	; (8001e48 <LL_TIM_Init+0xd8>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d007      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	4a20      	ldr	r2, [pc, #128]	; (8001e4c <LL_TIM_Init+0xdc>)
 8001dca:	4293      	cmp	r3, r2
 8001dcc:	d003      	beq.n	8001dd6 <LL_TIM_Init+0x66>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	4a1f      	ldr	r2, [pc, #124]	; (8001e50 <LL_TIM_Init+0xe0>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d106      	bne.n	8001de4 <LL_TIM_Init+0x74>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	68db      	ldr	r3, [r3, #12]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	68fa      	ldr	r2, [r7, #12]
 8001de8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001dea:	683b      	ldr	r3, [r7, #0]
 8001dec:	689b      	ldr	r3, [r3, #8]
 8001dee:	4619      	mov	r1, r3
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7ff ff3a 	bl	8001c6a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001df6:	683b      	ldr	r3, [r7, #0]
 8001df8:	881b      	ldrh	r3, [r3, #0]
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff ff26 	bl	8001c4e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	4a0e      	ldr	r2, [pc, #56]	; (8001e40 <LL_TIM_Init+0xd0>)
 8001e06:	4293      	cmp	r3, r2
 8001e08:	d00b      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	4a0e      	ldr	r2, [pc, #56]	; (8001e48 <LL_TIM_Init+0xd8>)
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	d007      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <LL_TIM_Init+0xdc>)
 8001e16:	4293      	cmp	r3, r2
 8001e18:	d003      	beq.n	8001e22 <LL_TIM_Init+0xb2>
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4a0c      	ldr	r2, [pc, #48]	; (8001e50 <LL_TIM_Init+0xe0>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d105      	bne.n	8001e2e <LL_TIM_Init+0xbe>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001e22:	683b      	ldr	r3, [r7, #0]
 8001e24:	7c1b      	ldrb	r3, [r3, #16]
 8001e26:	4619      	mov	r1, r3
 8001e28:	6878      	ldr	r0, [r7, #4]
 8001e2a:	f7ff ff2c 	bl	8001c86 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff8d 	bl	8001d4e <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001e34:	2300      	movs	r3, #0
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3710      	adds	r7, #16
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	40012c00 	.word	0x40012c00
 8001e44:	40000400 	.word	0x40000400
 8001e48:	40014000 	.word	0x40014000
 8001e4c:	40014400 	.word	0x40014400
 8001e50:	40014800 	.word	0x40014800

08001e54 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	60f8      	str	r0, [r7, #12]
 8001e5c:	60b9      	str	r1, [r7, #8]
 8001e5e:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8001e60:	2301      	movs	r3, #1
 8001e62:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e6a:	d01f      	beq.n	8001eac <LL_TIM_OC_Init+0x58>
 8001e6c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e70:	d804      	bhi.n	8001e7c <LL_TIM_OC_Init+0x28>
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d00c      	beq.n	8001e90 <LL_TIM_OC_Init+0x3c>
 8001e76:	2b10      	cmp	r3, #16
 8001e78:	d011      	beq.n	8001e9e <LL_TIM_OC_Init+0x4a>
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
#endif /* TIM_CCER_CC5E */
    default:
      break;
 8001e7a:	e033      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8001e7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e80:	d022      	beq.n	8001ec8 <LL_TIM_OC_Init+0x74>
 8001e82:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e86:	d026      	beq.n	8001ed6 <LL_TIM_OC_Init+0x82>
 8001e88:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e8c:	d015      	beq.n	8001eba <LL_TIM_OC_Init+0x66>
      break;
 8001e8e:	e029      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8001e90:	6879      	ldr	r1, [r7, #4]
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f000 f82c 	bl	8001ef0 <OC1Config>
 8001e98:	4603      	mov	r3, r0
 8001e9a:	75fb      	strb	r3, [r7, #23]
      break;
 8001e9c:	e022      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8001e9e:	6879      	ldr	r1, [r7, #4]
 8001ea0:	68f8      	ldr	r0, [r7, #12]
 8001ea2:	f000 f89f 	bl	8001fe4 <OC2Config>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	75fb      	strb	r3, [r7, #23]
      break;
 8001eaa:	e01b      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8001eac:	6879      	ldr	r1, [r7, #4]
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	f000 f916 	bl	80020e0 <OC3Config>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	75fb      	strb	r3, [r7, #23]
      break;
 8001eb8:	e014      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8001eba:	6879      	ldr	r1, [r7, #4]
 8001ebc:	68f8      	ldr	r0, [r7, #12]
 8001ebe:	f000 f98d 	bl	80021dc <OC4Config>
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8001ec6:	e00d      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8001ec8:	6879      	ldr	r1, [r7, #4]
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f9ec 	bl	80022a8 <OC5Config>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	75fb      	strb	r3, [r7, #23]
      break;
 8001ed4:	e006      	b.n	8001ee4 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8001ed6:	6879      	ldr	r1, [r7, #4]
 8001ed8:	68f8      	ldr	r0, [r7, #12]
 8001eda:	f000 fa43 	bl	8002364 <OC6Config>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	75fb      	strb	r3, [r7, #23]
      break;
 8001ee2:	bf00      	nop
  }

  return result;
 8001ee4:	7dfb      	ldrb	r3, [r7, #23]
}
 8001ee6:	4618      	mov	r0, r3
 8001ee8:	3718      	adds	r7, #24
 8001eea:	46bd      	mov	sp, r7
 8001eec:	bd80      	pop	{r7, pc}
	...

08001ef0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b086      	sub	sp, #24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	6078      	str	r0, [r7, #4]
 8001ef8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	6a1b      	ldr	r3, [r3, #32]
 8001efe:	f023 0201 	bic.w	r2, r3, #1
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6a1b      	ldr	r3, [r3, #32]
 8001f0a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	699b      	ldr	r3, [r3, #24]
 8001f16:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001f2a:	683a      	ldr	r2, [r7, #0]
 8001f2c:	6812      	ldr	r2, [r2, #0]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	f023 0202 	bic.w	r2, r3, #2
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	691b      	ldr	r3, [r3, #16]
 8001f3c:	4313      	orrs	r3, r2
 8001f3e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8001f40:	697b      	ldr	r3, [r7, #20]
 8001f42:	f023 0201 	bic.w	r2, r3, #1
 8001f46:	683b      	ldr	r3, [r7, #0]
 8001f48:	685b      	ldr	r3, [r3, #4]
 8001f4a:	4313      	orrs	r3, r2
 8001f4c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	4a20      	ldr	r2, [pc, #128]	; (8001fd4 <OC1Config+0xe4>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d00b      	beq.n	8001f6e <OC1Config+0x7e>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	4a1f      	ldr	r2, [pc, #124]	; (8001fd8 <OC1Config+0xe8>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d007      	beq.n	8001f6e <OC1Config+0x7e>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	4a1e      	ldr	r2, [pc, #120]	; (8001fdc <OC1Config+0xec>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d003      	beq.n	8001f6e <OC1Config+0x7e>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	4a1d      	ldr	r2, [pc, #116]	; (8001fe0 <OC1Config+0xf0>)
 8001f6a:	4293      	cmp	r3, r2
 8001f6c:	d11e      	bne.n	8001fac <OC1Config+0xbc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8001f6e:	697b      	ldr	r3, [r7, #20]
 8001f70:	f023 0208 	bic.w	r2, r3, #8
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	695b      	ldr	r3, [r3, #20]
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4313      	orrs	r3, r2
 8001f7c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	f023 0204 	bic.w	r2, r3, #4
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	689b      	ldr	r3, [r3, #8]
 8001f88:	009b      	lsls	r3, r3, #2
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	699b      	ldr	r3, [r3, #24]
 8001f98:	4313      	orrs	r3, r2
 8001f9a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	69db      	ldr	r3, [r3, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4313      	orrs	r3, r2
 8001faa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	693a      	ldr	r2, [r7, #16]
 8001fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff fe6f 	bl	8001ca2 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	697a      	ldr	r2, [r7, #20]
 8001fc8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8001fca:	2300      	movs	r3, #0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40012c00 	.word	0x40012c00
 8001fd8:	40014000 	.word	0x40014000
 8001fdc:	40014400 	.word	0x40014400
 8001fe0:	40014800 	.word	0x40014800

08001fe4 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8001fe4:	b580      	push	{r7, lr}
 8001fe6:	b086      	sub	sp, #24
 8001fe8:	af00      	add	r7, sp, #0
 8001fea:	6078      	str	r0, [r7, #4]
 8001fec:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6a1b      	ldr	r3, [r3, #32]
 8001ff2:	f023 0210 	bic.w	r2, r3, #16
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a1b      	ldr	r3, [r3, #32]
 8001ffe:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	699b      	ldr	r3, [r3, #24]
 800200a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800201a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	6812      	ldr	r2, [r2, #0]
 8002022:	0212      	lsls	r2, r2, #8
 8002024:	4313      	orrs	r3, r2
 8002026:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f023 0220 	bic.w	r2, r3, #32
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	691b      	ldr	r3, [r3, #16]
 8002032:	011b      	lsls	r3, r3, #4
 8002034:	4313      	orrs	r3, r2
 8002036:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002038:	697b      	ldr	r3, [r7, #20]
 800203a:	f023 0210 	bic.w	r2, r3, #16
 800203e:	683b      	ldr	r3, [r7, #0]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	011b      	lsls	r3, r3, #4
 8002044:	4313      	orrs	r3, r2
 8002046:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a21      	ldr	r2, [pc, #132]	; (80020d0 <OC2Config+0xec>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d00b      	beq.n	8002068 <OC2Config+0x84>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	4a20      	ldr	r2, [pc, #128]	; (80020d4 <OC2Config+0xf0>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d007      	beq.n	8002068 <OC2Config+0x84>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	4a1f      	ldr	r2, [pc, #124]	; (80020d8 <OC2Config+0xf4>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d003      	beq.n	8002068 <OC2Config+0x84>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	4a1e      	ldr	r2, [pc, #120]	; (80020dc <OC2Config+0xf8>)
 8002064:	4293      	cmp	r3, r2
 8002066:	d11f      	bne.n	80020a8 <OC2Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	695b      	ldr	r3, [r3, #20]
 8002072:	019b      	lsls	r3, r3, #6
 8002074:	4313      	orrs	r3, r2
 8002076:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002078:	697b      	ldr	r3, [r7, #20]
 800207a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	019b      	lsls	r3, r3, #6
 8002084:	4313      	orrs	r3, r2
 8002086:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	699b      	ldr	r3, [r3, #24]
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	4313      	orrs	r3, r2
 8002096:	613b      	str	r3, [r7, #16]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002098:	693b      	ldr	r3, [r7, #16]
 800209a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	69db      	ldr	r3, [r3, #28]
 80020a2:	00db      	lsls	r3, r3, #3
 80020a4:	4313      	orrs	r3, r2
 80020a6:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	693a      	ldr	r2, [r7, #16]
 80020ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80020b4:	683b      	ldr	r3, [r7, #0]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fdff 	bl	8001cbe <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	697a      	ldr	r2, [r7, #20]
 80020c4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80020c6:	2300      	movs	r3, #0
}
 80020c8:	4618      	mov	r0, r3
 80020ca:	3718      	adds	r7, #24
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	40012c00 	.word	0x40012c00
 80020d4:	40014000 	.word	0x40014000
 80020d8:	40014400 	.word	0x40014400
 80020dc:	40014800 	.word	0x40014800

080020e0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b086      	sub	sp, #24
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	6a1b      	ldr	r3, [r3, #32]
 80020ee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a1b      	ldr	r3, [r3, #32]
 80020fa:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	f023 0303 	bic.w	r3, r3, #3
 800210e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002116:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800211a:	683a      	ldr	r2, [r7, #0]
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4313      	orrs	r3, r2
 8002120:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002122:	697b      	ldr	r3, [r7, #20]
 8002124:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	691b      	ldr	r3, [r3, #16]
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	4313      	orrs	r3, r2
 8002130:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	685b      	ldr	r3, [r3, #4]
 800213c:	021b      	lsls	r3, r3, #8
 800213e:	4313      	orrs	r3, r2
 8002140:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a21      	ldr	r2, [pc, #132]	; (80021cc <OC3Config+0xec>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d00b      	beq.n	8002162 <OC3Config+0x82>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a20      	ldr	r2, [pc, #128]	; (80021d0 <OC3Config+0xf0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d007      	beq.n	8002162 <OC3Config+0x82>
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	4a1f      	ldr	r2, [pc, #124]	; (80021d4 <OC3Config+0xf4>)
 8002156:	4293      	cmp	r3, r2
 8002158:	d003      	beq.n	8002162 <OC3Config+0x82>
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	4a1e      	ldr	r2, [pc, #120]	; (80021d8 <OC3Config+0xf8>)
 800215e:	4293      	cmp	r3, r2
 8002160:	d11f      	bne.n	80021a2 <OC3Config+0xc2>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002168:	683b      	ldr	r3, [r7, #0]
 800216a:	695b      	ldr	r3, [r3, #20]
 800216c:	029b      	lsls	r3, r3, #10
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002172:	697b      	ldr	r3, [r7, #20]
 8002174:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	689b      	ldr	r3, [r3, #8]
 800217c:	029b      	lsls	r3, r3, #10
 800217e:	4313      	orrs	r3, r2
 8002180:	617b      	str	r3, [r7, #20]

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002182:	693b      	ldr	r3, [r7, #16]
 8002184:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	011b      	lsls	r3, r3, #4
 800218e:	4313      	orrs	r3, r2
 8002190:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	69db      	ldr	r3, [r3, #28]
 800219c:	015b      	lsls	r3, r3, #5
 800219e:	4313      	orrs	r3, r2
 80021a0:	613b      	str	r3, [r7, #16]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	693a      	ldr	r2, [r7, #16]
 80021a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68fa      	ldr	r2, [r7, #12]
 80021ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80021ae:	683b      	ldr	r3, [r7, #0]
 80021b0:	68db      	ldr	r3, [r3, #12]
 80021b2:	4619      	mov	r1, r3
 80021b4:	6878      	ldr	r0, [r7, #4]
 80021b6:	f7ff fd90 	bl	8001cda <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	697a      	ldr	r2, [r7, #20]
 80021be:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80021c0:	2300      	movs	r3, #0
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	40012c00 	.word	0x40012c00
 80021d0:	40014000 	.word	0x40014000
 80021d4:	40014400 	.word	0x40014400
 80021d8:	40014800 	.word	0x40014800

080021dc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80021dc:	b580      	push	{r7, lr}
 80021de:	b086      	sub	sp, #24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6a1b      	ldr	r3, [r3, #32]
 80021ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6a1b      	ldr	r3, [r3, #32]
 80021f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	69db      	ldr	r3, [r3, #28]
 8002202:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800220a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002212:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002216:	683a      	ldr	r2, [r7, #0]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	0212      	lsls	r2, r2, #8
 800221c:	4313      	orrs	r3, r2
 800221e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	691b      	ldr	r3, [r3, #16]
 800222a:	031b      	lsls	r3, r3, #12
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	031b      	lsls	r3, r3, #12
 800223c:	4313      	orrs	r3, r2
 800223e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	4a15      	ldr	r2, [pc, #84]	; (8002298 <OC4Config+0xbc>)
 8002244:	4293      	cmp	r3, r2
 8002246:	d00b      	beq.n	8002260 <OC4Config+0x84>
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	4a14      	ldr	r2, [pc, #80]	; (800229c <OC4Config+0xc0>)
 800224c:	4293      	cmp	r3, r2
 800224e:	d007      	beq.n	8002260 <OC4Config+0x84>
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	4a13      	ldr	r2, [pc, #76]	; (80022a0 <OC4Config+0xc4>)
 8002254:	4293      	cmp	r3, r2
 8002256:	d003      	beq.n	8002260 <OC4Config+0x84>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	4a12      	ldr	r2, [pc, #72]	; (80022a4 <OC4Config+0xc8>)
 800225c:	4293      	cmp	r3, r2
 800225e:	d107      	bne.n	8002270 <OC4Config+0x94>
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

#if defined(STM32F373xC) || defined(STM32F378xx)
#else
    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002260:	697b      	ldr	r3, [r7, #20]
 8002262:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002266:	683b      	ldr	r3, [r7, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	019b      	lsls	r3, r3, #6
 800226c:	4313      	orrs	r3, r2
 800226e:	617b      	str	r3, [r7, #20]
#endif
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	697a      	ldr	r2, [r7, #20]
 8002274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68fa      	ldr	r2, [r7, #12]
 800227a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 800227c:	683b      	ldr	r3, [r7, #0]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4619      	mov	r1, r3
 8002282:	6878      	ldr	r0, [r7, #4]
 8002284:	f7ff fd37 	bl	8001cf6 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	693a      	ldr	r2, [r7, #16]
 800228c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800228e:	2300      	movs	r3, #0
}
 8002290:	4618      	mov	r0, r3
 8002292:	3718      	adds	r7, #24
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}
 8002298:	40012c00 	.word	0x40012c00
 800229c:	40014000 	.word	0x40014000
 80022a0:	40014400 	.word	0x40014400
 80022a4:	40014800 	.word	0x40014800

080022a8 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b084      	sub	sp, #16
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	6a1b      	ldr	r3, [r3, #32]
 80022c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022c8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80022ca:	68bb      	ldr	r3, [r7, #8]
 80022cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022d0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80022d4:	683a      	ldr	r2, [r7, #0]
 80022d6:	6812      	ldr	r2, [r2, #0]
 80022d8:	4313      	orrs	r3, r2
 80022da:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80022e2:	683b      	ldr	r3, [r7, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	041b      	lsls	r3, r3, #16
 80022e8:	4313      	orrs	r3, r2
 80022ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	041b      	lsls	r3, r3, #16
 80022f8:	4313      	orrs	r3, r2
 80022fa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	4a15      	ldr	r2, [pc, #84]	; (8002354 <OC5Config+0xac>)
 8002300:	4293      	cmp	r3, r2
 8002302:	d00b      	beq.n	800231c <OC5Config+0x74>
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <OC5Config+0xb0>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d007      	beq.n	800231c <OC5Config+0x74>
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	4a13      	ldr	r2, [pc, #76]	; (800235c <OC5Config+0xb4>)
 8002310:	4293      	cmp	r3, r2
 8002312:	d003      	beq.n	800231c <OC5Config+0x74>
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	4a12      	ldr	r2, [pc, #72]	; (8002360 <OC5Config+0xb8>)
 8002318:	4293      	cmp	r3, r2
 800231a:	d109      	bne.n	8002330 <OC5Config+0x88>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	699b      	ldr	r3, [r3, #24]
 8002328:	021b      	lsls	r3, r3, #8
 800232a:	431a      	orrs	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	68ba      	ldr	r2, [r7, #8]
 8002334:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	4619      	mov	r1, r3
 800233c:	6878      	ldr	r0, [r7, #4]
 800233e:	f7ff fce8 	bl	8001d12 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	68fa      	ldr	r2, [r7, #12]
 8002346:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002348:	2300      	movs	r3, #0
}
 800234a:	4618      	mov	r0, r3
 800234c:	3710      	adds	r7, #16
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	40012c00 	.word	0x40012c00
 8002358:	40014000 	.word	0x40014000
 800235c:	40014400 	.word	0x40014400
 8002360:	40014800 	.word	0x40014800

08002364 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b084      	sub	sp, #16
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
 800236c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	6a1b      	ldr	r3, [r3, #32]
 8002372:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6a1b      	ldr	r3, [r3, #32]
 800237e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002384:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800238c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	6812      	ldr	r2, [r2, #0]
 8002394:	0212      	lsls	r2, r2, #8
 8002396:	4313      	orrs	r3, r2
 8002398:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	691b      	ldr	r3, [r3, #16]
 80023a4:	051b      	lsls	r3, r3, #20
 80023a6:	4313      	orrs	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	051b      	lsls	r3, r3, #20
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a14      	ldr	r2, [pc, #80]	; (8002410 <OC6Config+0xac>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d00b      	beq.n	80023da <OC6Config+0x76>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a13      	ldr	r2, [pc, #76]	; (8002414 <OC6Config+0xb0>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d007      	beq.n	80023da <OC6Config+0x76>
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	4a12      	ldr	r2, [pc, #72]	; (8002418 <OC6Config+0xb4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d003      	beq.n	80023da <OC6Config+0x76>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	4a11      	ldr	r2, [pc, #68]	; (800241c <OC6Config+0xb8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d109      	bne.n	80023ee <OC6Config+0x8a>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	685b      	ldr	r3, [r3, #4]
 80023de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80023e2:	683b      	ldr	r3, [r7, #0]
 80023e4:	699b      	ldr	r3, [r3, #24]
 80023e6:	029b      	lsls	r3, r3, #10
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	68ba      	ldr	r2, [r7, #8]
 80023f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	4619      	mov	r1, r3
 80023fa:	6878      	ldr	r0, [r7, #4]
 80023fc:	f7ff fc99 	bl	8001d32 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	68fa      	ldr	r2, [r7, #12]
 8002404:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002406:	2300      	movs	r3, #0
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40012c00 	.word	0x40012c00
 8002414:	40014000 	.word	0x40014000
 8002418:	40014400 	.word	0x40014400
 800241c:	40014800 	.word	0x40014800

08002420 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002420:	b480      	push	{r7}
 8002422:	b083      	sub	sp, #12
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002428:	4a04      	ldr	r2, [pc, #16]	; (800243c <LL_SetSystemCoreClock+0x1c>)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	6013      	str	r3, [r2, #0]
}
 800242e:	bf00      	nop
 8002430:	370c      	adds	r7, #12
 8002432:	46bd      	mov	sp, r7
 8002434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002438:	4770      	bx	lr
 800243a:	bf00      	nop
 800243c:	20000000 	.word	0x20000000

08002440 <__libc_init_array>:
 8002440:	b570      	push	{r4, r5, r6, lr}
 8002442:	4e0d      	ldr	r6, [pc, #52]	; (8002478 <__libc_init_array+0x38>)
 8002444:	4c0d      	ldr	r4, [pc, #52]	; (800247c <__libc_init_array+0x3c>)
 8002446:	1ba4      	subs	r4, r4, r6
 8002448:	10a4      	asrs	r4, r4, #2
 800244a:	2500      	movs	r5, #0
 800244c:	42a5      	cmp	r5, r4
 800244e:	d109      	bne.n	8002464 <__libc_init_array+0x24>
 8002450:	4e0b      	ldr	r6, [pc, #44]	; (8002480 <__libc_init_array+0x40>)
 8002452:	4c0c      	ldr	r4, [pc, #48]	; (8002484 <__libc_init_array+0x44>)
 8002454:	f000 f820 	bl	8002498 <_init>
 8002458:	1ba4      	subs	r4, r4, r6
 800245a:	10a4      	asrs	r4, r4, #2
 800245c:	2500      	movs	r5, #0
 800245e:	42a5      	cmp	r5, r4
 8002460:	d105      	bne.n	800246e <__libc_init_array+0x2e>
 8002462:	bd70      	pop	{r4, r5, r6, pc}
 8002464:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002468:	4798      	blx	r3
 800246a:	3501      	adds	r5, #1
 800246c:	e7ee      	b.n	800244c <__libc_init_array+0xc>
 800246e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002472:	4798      	blx	r3
 8002474:	3501      	adds	r5, #1
 8002476:	e7f2      	b.n	800245e <__libc_init_array+0x1e>
 8002478:	080024c8 	.word	0x080024c8
 800247c:	080024c8 	.word	0x080024c8
 8002480:	080024c8 	.word	0x080024c8
 8002484:	080024cc 	.word	0x080024cc

08002488 <memset>:
 8002488:	4402      	add	r2, r0
 800248a:	4603      	mov	r3, r0
 800248c:	4293      	cmp	r3, r2
 800248e:	d100      	bne.n	8002492 <memset+0xa>
 8002490:	4770      	bx	lr
 8002492:	f803 1b01 	strb.w	r1, [r3], #1
 8002496:	e7f9      	b.n	800248c <memset+0x4>

08002498 <_init>:
 8002498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249a:	bf00      	nop
 800249c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800249e:	bc08      	pop	{r3}
 80024a0:	469e      	mov	lr, r3
 80024a2:	4770      	bx	lr

080024a4 <_fini>:
 80024a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024a6:	bf00      	nop
 80024a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024aa:	bc08      	pop	{r3}
 80024ac:	469e      	mov	lr, r3
 80024ae:	4770      	bx	lr
